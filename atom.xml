<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vincent&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dreambo8563.github.io/"/>
  <updated>2019-05-17T07:39:47.733Z</updated>
  <id>https://dreambo8563.github.io/</id>
  
  <author>
    <name>Vincent Guo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Electron - Pt</title>
    <link href="https://dreambo8563.github.io/2019/05/17/Electron-Pt/"/>
    <id>https://dreambo8563.github.io/2019/05/17/Electron-Pt/</id>
    <published>2019-05-17T07:30:05.000Z</published>
    <updated>2019-05-17T07:39:47.733Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/dreambo8563/Pt/master/src/favicon.256x256.png" alt=""></p><ul><li>最近看到很多 electronjs 的文章, 而且想做点小工具. 所以就有 Pt</li><li>很久没看 angular 了(之前看的时候是 2, 现在 8 都 RC 了), 所以放弃了日常使用的 Vue, 复习下 angular</li><li>s 性能相关的自己所学不多, 所以想依靠 chrome, 所以看上了 Puppeteer</li></ul><p>先看个动图吧:<br><img src="https://raw.githubusercontent.com/dreambo8563/static-assets/master/pt.gif" alt=""></p><p>好了理由说完了, 说下基本的过程吧. 当然重要的是这个学习的过程.</p><p>脚手架: <a href="https://github.com/maximegris/angular-electron" target="_blank" rel="noopener">https://github.com/maximegris/angular-electron</a></p><p>然后做了几个步骤:</p><ul><li>整合 pupeteer, 我这里使用了 pupeteer-core, 所以需要机器上自带 chrome</li><li>整合下 material (angular 生态里 UI 库确实还不太行, material 还是那么拖后腿)</li><li>看了 2 天 angular 官网走了一遍 hero</li><li>electronjs 部分基本都是官网和参考例子(<a href="https://github.com/hokein/electron-sample-apps" target="_blank" rel="noopener">https://github.com/hokein/electron-sample-apps</a>)</li></ul><p>##基本想法:</p><p>需要一些现成的数据:<br>资源使用率 - 这个貌似很多人都不太重视.<br>lighthouse 报告- 这个比较全面<br>其实,我们组里的很多前端都没用过上面两个东西.</p><p>##获取数据:</p><p>puppeteer 整合完了, 参考例子 <a href="https://github.com/GoogleChromeLabs/puppeteer-examples" target="_blank" rel="noopener">https://github.com/GoogleChromeLabs/puppeteer-examples</a><br>使用率方面我是改了例子的代码, 生成一个数组出来, 例子里是输出到终端了.<br>lighthouse 基本就是直接拿来用的, 改的地方不多.</p><p>##展示:<br>Material 的 Table 来做列表,这里也自己写了个 pipe. 而且觉得 angular 的组件真的不太强大…<br>search button 加个缩放小动画<br>lighthouse button 来个透明度小动画<br>使用率进度条来个 width 的动画<br>别看就一个页面, animation 还用上了.</p><hr><p>lighthouse 报告展示的问题,因为拿到的是一个整页面. 所以开始考虑的方向就是 iframe 这种. 官方不推荐 webview. 最终选择了新开一个子 window. 这个报告相对独立. 自带亮暗两种主题, 默认是亮的, 为了配合我列表页的颜色, 我用代码改成了暗主题.</p><h2 id="打包"><a href="#打包" class="headerlink" title="打包:"></a>打包:</h2><p>我打包搜了好久, 最后的方法是 Travis 上打 linux 的包, 本地 MBP 打 mac 的 dmg. windows 还没弄, 看其他人文章是需要另一个 CI.</p><h2 id="Logo"><a href="#Logo" class="headerlink" title="Logo:"></a>Logo:</h2><p>我们的设计师同学不爱帮忙, 所以我找了对面可爱的前端小伙伴设计了. 鄙视下不会 PS 的自己. 设计方面自己还真的挺想学下的.</p><h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题:"></a>一些问题:</h2><p>有些网站经常会报错, 超时什么的. 这个还得继续看看是什么情况, 难道 SPA 的 都不行?</p><p>有经验的大佬请留言, 给小弟点思路.</p><p>仓库地址:</p><p><a href="https://github.com/dreambo8563/Pt" target="_blank" rel="noopener">https://github.com/dreambo8563/Pt</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dreambo8563/Pt/master/src/favicon.256x256.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最近看到很多 electronjs 的文章, 而且
      
    
    </summary>
    
      <category term="electronjs" scheme="https://dreambo8563.github.io/categories/electronjs/"/>
    
    
      <category term="electronjs" scheme="https://dreambo8563.github.io/tags/electronjs/"/>
    
  </entry>
  
  <entry>
    <title>Vue - provide/inject应用</title>
    <link href="https://dreambo8563.github.io/2019/05/12/Vue-provide-inject%E5%BA%94%E7%94%A8/"/>
    <id>https://dreambo8563.github.io/2019/05/12/Vue-provide-inject应用/</id>
    <published>2019-05-12T15:07:28.000Z</published>
    <updated>2019-05-12T15:19:16.595Z</updated>
    
    <content type="html"><![CDATA[<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p>provide 选项应该是一个对象或返回一个对象的函数。该对象包含可注入其子孙的属性。在该对象中你可以使用 ES2015 Symbols 作为 key，但是只在原生支持 Symbol 和 Reflect.ownKeys 的环境下可工作。</p><p>inject 选项应该是：</p><p>一个字符串数组，或<br>一个对象，对象的 key 是本地的绑定名，value 是：<br>在可用的注入内容中搜索用的 key (字符串或 Symbol)，或<br>一个对象，该对象的：<br>from 属性是在可用的注入内容中搜索用的 key (字符串或 Symbol)<br>default 属性是降级情况下使用的 value</p><h3 id="drawer-组件中应用"><a href="#drawer-组件中应用" class="headerlink" title="drawer 组件中应用"></a>drawer 组件中应用</h3><p>repo: <a href="https://github.com/dreambo8563/vue-simple-drawer" target="_blank" rel="noopener">https://github.com/dreambo8563/vue-simple-drawer</a></p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>这个组件有个能力就是嵌套, drawer 里面嵌套 drawer. 这个时候需要 z-index 属性能够自动的递增上去<br>这中间包 modal 层的 z-index</p><p>这样的情况下,我想到了 provide/inject</p><ul><li>用户可以通过 zIndex prop 传入自定义的 index</li><li>当前实际的 zIndex 是两部分获得</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> computedIndex() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.zIndex || <span class="keyword">this</span>.simpleDrawerIndex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>simpleDrawerIndex</code> 就是注入进来的 zIndex</p><ul><li>如果用户没设置就用注入的</li></ul><p>注入且设置默认值(最外层不会被任何祖先注入,所以必须有默认值)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">inject: &#123;</span><br><span class="line">   simpleDrawerIndex: &#123; <span class="attr">default</span>: <span class="number">1000</span> &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>开始注入:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">provide() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      simpleDrawerIndex: <span class="keyword">this</span>.computedIndex + <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>这里注入的值要比当前 drawer 的值 +1 也就是 “递增”</p><h3 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h3><p>当开始用的时候,总是感觉要死循环了, 其实就是注入值的默认值问题.<br>子组件肯定有注入值, 根组件不一定有</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;官方文档&quot;&gt;&lt;a href=&quot;#官方文档&quot; class=&quot;headerlink&quot; title=&quot;官方文档&quot;&gt;&lt;/a&gt;官方文档&lt;/h3&gt;&lt;p&gt;provide 选项应该是一个对象或返回一个对象的函数。该对象包含可注入其子孙的属性。在该对象中你可以使用 ES2015 S
      
    
    </summary>
    
      <category term="vue" scheme="https://dreambo8563.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://dreambo8563.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>easy-circular-progress</title>
    <link href="https://dreambo8563.github.io/2019/04/23/easy-circular-progress/"/>
    <id>https://dreambo8563.github.io/2019/04/23/easy-circular-progress/</id>
    <published>2019-04-23T13:07:21.000Z</published>
    <updated>2019-04-23T13:08:44.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="easy-circular-progress"><a href="#easy-circular-progress" class="headerlink" title="easy-circular-progress"></a>easy-circular-progress</h1><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install easy-circular-progress --save</span><br></pre></td></tr></table></figure><h3 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;Progress value=<span class="string">"16.88"</span>&gt;</span><br><span class="line">      &lt;!-- <span class="xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">b</span>&gt;</span>goood<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span>--&gt;</span><br><span class="line">    &lt;<span class="regexp">/Progress&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Progress strokeColor="#FF00AA" value="16.88"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;template v-slot:footer&gt;</span></span><br><span class="line"><span class="regexp">        &lt;b&gt;More Color&lt;/</span>b&gt;</span><br><span class="line">      &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Progress&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Progress :radius=<span class="string">"50"</span> :strokeWidth=<span class="string">"10"</span> value=<span class="string">"86.12"</span>&gt;</span><br><span class="line">      &lt;template v-slot:footer&gt;</span><br><span class="line">        &lt;b&gt;Bolder &amp; Bigger One&lt;<span class="regexp">/b&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>template&gt;</span><br><span class="line">    &lt;<span class="regexp">/Progress&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;Progress</span></span><br><span class="line"><span class="regexp">      :transitionDuration="5000"</span></span><br><span class="line"><span class="regexp">      :radius="50"</span></span><br><span class="line"><span class="regexp">      :strokeWidth="10"</span></span><br><span class="line"><span class="regexp">      value="86.12"</span></span><br><span class="line"><span class="regexp">    &gt;</span></span><br><span class="line"><span class="regexp">      &lt;template v-slot:footer&gt;</span></span><br><span class="line"><span class="regexp">        &lt;b&gt;Slow One&lt;/</span>b&gt;</span><br><span class="line">      &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Progress&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Progress</span><br><span class="line">      :transitionDuration=<span class="string">"5000"</span></span><br><span class="line">      :radius=<span class="string">"55"</span></span><br><span class="line">      :strokeWidth=<span class="string">"10"</span></span><br><span class="line">      value=<span class="string">"86.12567"</span></span><br><span class="line">    &gt;</span><br><span class="line">      &lt;template v-slot:footer&gt;</span><br><span class="line">        &lt;b&gt;More Precise&lt;<span class="regexp">/b&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>template&gt;</span><br><span class="line">    &lt;<span class="regexp">/Progress&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import Progress from "./i</span>ndex.vue<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">  name: "</span>app<span class="string">",</span></span><br><span class="line"><span class="string">  components: &#123;</span></span><br><span class="line"><span class="string">    Progress</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;style lang="</span>scss<span class="string">"&gt;</span></span><br><span class="line"><span class="string">#app &#123;</span></span><br><span class="line"><span class="string">  font-family: "</span>Avenir<span class="string">", Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="string">  -webkit-font-smoothing: antialiased;</span></span><br><span class="line"><span class="string">  -moz-osx-font-smoothing: grayscale;</span></span><br><span class="line"><span class="string">  text-align: center;</span></span><br><span class="line"><span class="string">  height: 100vh;</span></span><br><span class="line"><span class="string">  color: #fff;</span></span><br><span class="line"><span class="string">  background: #3e423a;</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  justify-content: center;</span></span><br><span class="line"><span class="string">  align-items: center;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">body &#123;</span></span><br><span class="line"><span class="string">  margin: 0;</span></span><br><span class="line"><span class="string">  padding: 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Prop-Types"><a href="#Prop-Types" class="headerlink" title="Prop Types"></a>Prop Types</h3><table><thead><tr><th style="text-align:left">Property</th><th style="text-align:left">Type</th><th style="text-align:left">Required?</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">strokeWidth</td><td style="text-align:left">Number</td><td style="text-align:left"></td><td style="text-align:left">default is 4, the width of the progress circle, the bigger the bolder</td></tr><tr><td style="text-align:left">radius</td><td style="text-align:left">Number</td><td style="text-align:left"></td><td style="text-align:left">the inner circle radius, default is 38</td></tr><tr><td style="text-align:left">transitionDuration</td><td style="text-align:left">Number</td><td style="text-align:left"></td><td style="text-align:left">default is 1000, transitionDuration for the animation</td></tr><tr><td style="text-align:left">strokeColors</td><td style="text-align:left">String</td><td style="text-align:left"></td><td style="text-align:left">default is “#aaff00”</td></tr><tr><td style="text-align:left">value</td><td style="text-align:left">Number \</td><td style="text-align:left">String</td><td style="text-align:left"></td><td>default is 0.0, should be less or equal then 100</td></tr></tbody></table><h3 id="Slot"><a href="#Slot" class="headerlink" title="Slot"></a>Slot</h3><table><thead><tr><th style="text-align:left">Slot Name</th><th>Description</th></tr></thead><tbody><tr><td style="text-align:left">footer</td><td>we can add a footer for the circle</td></tr></tbody></table><h3 id="Advance-Guide"><a href="#Advance-Guide" class="headerlink" title="Advance Guide"></a>Advance Guide</h3><h4 id="Customized-Theme"><a href="#Customized-Theme" class="headerlink" title="Customized Theme"></a>Customized Theme</h4><ul><li>In your customized scss file (demo.scss)</li></ul><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$--circular-progress-int-fz</span>: <span class="number">28px</span>;</span><br><span class="line"><span class="variable">$--circular-progress-dec-fz</span>: <span class="number">12px</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"~easy-circular-progress/src/index"</span>;</span><br></pre></td></tr></table></figure><ul><li>import the scss to override the default theme in main.js (entry file) before you import the Draw component</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./demo.scss"</span></span><br></pre></td></tr></table></figure><blockquote><p>variables</p></blockquote><p>We split the number into two parts (int, dec)<br>We can define the font-size for each part</p><ul><li>\$–circular-progress-int-fz: 28px;</li><li>\$–circular-progress-dec-fz: 12px;</li></ul><h4 id="Possibly-Polyfill"><a href="#Possibly-Polyfill" class="headerlink" title="Possibly Polyfill"></a>Possibly Polyfill</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isNaN =</span><br><span class="line">  <span class="built_in">Number</span>.isNaN ||</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value !== value</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;easy-circular-progress&quot;&gt;&lt;a href=&quot;#easy-circular-progress&quot; class=&quot;headerlink&quot; title=&quot;easy-circular-progress&quot;&gt;&lt;/a&gt;easy-circular-progre
      
    
    </summary>
    
      <category term="vue" scheme="https://dreambo8563.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://dreambo8563.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>redis - resp</title>
    <link href="https://dreambo8563.github.io/2019/03/29/redis-resp/"/>
    <id>https://dreambo8563.github.io/2019/03/29/redis-resp/</id>
    <published>2019-03-29T14:57:02.000Z</published>
    <updated>2019-03-29T15:09:24.441Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RESP-Redis-Serialization-Protocol"><a href="#RESP-Redis-Serialization-Protocol" class="headerlink" title="RESP (Redis Serialization Protocol)"></a>RESP (Redis Serialization Protocol)</h3><p>其实就是 我们把可读性搞的命令通过 resp 转换为 redis server 能够识别的文本, redis server 给我们的响应体也是符合 resp 的.<br>我们再反序列化成可读的内容</p><blockquote><p><a href="https://redis.io/topics/protocol" target="_blank" rel="noopener">https://redis.io/topics/protocol</a></p></blockquote><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>In RESP, the type of some data depends on the first byte:</p><ul><li>For Simple Strings the first byte of the reply is “+”</li><li>For Errors the first byte of the reply is “-“</li><li>For Integers the first byte of the reply is “:”</li><li>For Bulk Strings the first byte of the reply is “\$”</li><li>For Arrays the first byte of the reply is “*“</li></ul><p>Additionally RESP is able to represent a Null value using a special variation of Bulk Strings or Array as specified later.</p><p>In RESP different parts of the protocol are always terminated with “\r\n” (CRLF).</p><h3 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h3><p>发送的命令除了根据 resp 转换发送, 还可以通过简化<br>比如</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">command = fmt.Sprintf(<span class="string">"SET %s %s\r\n"</span>, key, strconv.Quote(<span class="keyword">string</span>(reflect.ValueOf(value).String())))</span><br></pre></td></tr></table></figure><p>这里其实并没有完全把 set key value 进行 resp 的转换, 只是加了转义避免特殊字符是命令发生错误, 注意结尾需要 <strong>\r\n</strong></p><h3 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h3><p>因为我们需要知道 server 响应体是对应哪一次命令的,所以我们每次执行命令前都需要 lock,<br>得到本次的响应后才会 unlock</p><h3 id="接受"><a href="#接受" class="headerlink" title="接受"></a>接受</h3><p>接受的时候就没有简化的方式, 只能老老实实的解析</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">integersHandler</span><span class="params">(c *Client, head <span class="keyword">string</span>, r *bufio.Reader, locked <span class="keyword">bool</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> !locked &#123;</span><br><span class="line"><span class="keyword">defer</span> c.Unlock()</span><br><span class="line">&#125;</span><br><span class="line">trimedLine := Trim(head, <span class="string">":"</span>)</span><br><span class="line">size, err := strconv.Atoi(trimedLine)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, size)</span><br><span class="line">_, err = r.Read(buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(buf), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对整数的拂去, 截取 <strong>:</strong> 后面的为字节数</p><p>再去读取相应长度的内容,就是那个数字</p><h3 id="解析-slowlog"><a href="#解析-slowlog" class="headerlink" title="解析 slowlog"></a>解析 slowlog</h3><p>slowlog 的结构是嵌套的,他的结构比较特殊,所以解析的时候比较”死”</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> client</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/olekukonko/tablewriter"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Slowlog -</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">Slowlog</span><span class="params">(num <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">c.Lock()</span><br><span class="line"><span class="keyword">defer</span> c.Unlock()</span><br><span class="line">pub := fmt.Sprintf(<span class="string">"slowlog get %d\r\n"</span>, num)</span><br><span class="line"><span class="keyword">if</span> err := c.ExcuteCmd(pub); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">r := bufio.NewReader(c.Conn)</span><br><span class="line">line, err := r.ReadString(<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">trimedLine := Trim(line, <span class="string">"*"</span>)</span><br><span class="line">size, err := strconv.Atoi(trimedLine)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data := <span class="built_in">make</span>([][]<span class="keyword">string</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> index := <span class="number">0</span>; index &lt; size; index++ &#123;</span><br><span class="line">row, err := parserLog(c, r)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">data = <span class="built_in">append</span>(data, row)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">table := tablewriter.NewWriter(os.Stdout)</span><br><span class="line">table.SetHeader([]<span class="keyword">string</span>&#123;<span class="string">"ID"</span>, <span class="string">"timestamp"</span>, <span class="string">"duration(微秒)"</span>, <span class="string">"command"</span>&#125;)</span><br><span class="line">table.SetCaption(<span class="literal">true</span>, <span class="string">"慢日志查询结果"</span>)</span><br><span class="line">table.SetHeaderColor(tablewriter.Colors&#123;tablewriter.Bold, tablewriter.BgGreenColor&#125;,</span><br><span class="line">tablewriter.Colors&#123;tablewriter.FgHiRedColor, tablewriter.Bold, tablewriter.BgBlackColor&#125;,</span><br><span class="line">tablewriter.Colors&#123;tablewriter.BgRedColor, tablewriter.FgWhiteColor&#125;,</span><br><span class="line">tablewriter.Colors&#123;tablewriter.BgCyanColor, tablewriter.FgWhiteColor&#125;)</span><br><span class="line">table.SetColumnColor(tablewriter.Colors&#123;tablewriter.Normal, tablewriter.FgGreenColor&#125;,</span><br><span class="line">tablewriter.Colors&#123;tablewriter.Bold, tablewriter.FgHiRedColor&#125;,</span><br><span class="line">tablewriter.Colors&#123;tablewriter.Bold, tablewriter.FgWhiteColor&#125;,</span><br><span class="line">tablewriter.Colors&#123;tablewriter.Bold, tablewriter.FgBlackColor&#125;)</span><br><span class="line">table.SetRowLine(<span class="literal">true</span>) <span class="comment">// Enable row line</span></span><br><span class="line">table.SetAutoWrapText(<span class="literal">true</span>)</span><br><span class="line">table.SetReflowDuringAutoWrap(<span class="literal">true</span>)</span><br><span class="line"><span class="comment">// Change table lines</span></span><br><span class="line">table.SetCenterSeparator(<span class="string">"*"</span>)</span><br><span class="line">table.SetColumnSeparator(<span class="string">"╪"</span>)</span><br><span class="line">table.SetRowSeparator(<span class="string">"-"</span>)</span><br><span class="line"></span><br><span class="line">table.SetAlignment(tablewriter.ALIGN_LEFT)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> data &#123;</span><br><span class="line">table.Append(v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">table.Render()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parserLog</span><span class="params">(c *Client, r *bufio.Reader)</span> <span class="params">([]<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">line, err := r.ReadString(<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">items := Trim(line, <span class="string">"*"</span>)</span><br><span class="line">size, err := strconv.Atoi(items)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">row := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> index := <span class="number">0</span>; index &lt; <span class="number">3</span>; index++ &#123;</span><br><span class="line">line, err := r.ReadString(<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> index == <span class="number">1</span> &#123;</span><br><span class="line">i, err := strconv.ParseInt(Trim(line, <span class="string">":"</span>), <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">tm := time.Unix(i, <span class="number">0</span>)</span><br><span class="line">row = <span class="built_in">append</span>(row, tm.String())</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">row = <span class="built_in">append</span>(row, Trim(line, <span class="string">":"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">line, err = r.ReadString(<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">params := Trim(line, <span class="string">"*"</span>)</span><br><span class="line">size, err = strconv.Atoi(params)</span><br><span class="line"></span><br><span class="line">paramsStr := <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> index := <span class="number">0</span>; index &lt; size*<span class="number">2</span>; index++ &#123;</span><br><span class="line">line, err := r.ReadString(<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment">//有空行,需要跳跳</span></span><br><span class="line"><span class="keyword">if</span> index%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">paramsStr = paramsStr + <span class="string">" "</span> + parseSingleLine(c, line, r)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">row = <span class="built_in">append</span>(row, Trim(paramsStr, <span class="string">":"</span>))</span><br><span class="line"><span class="keyword">return</span> row, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parseSingleLine</span><span class="params">(c *Client, head <span class="keyword">string</span>, r *bufio.Reader)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> strings.HasPrefix(head, <span class="string">"$"</span>) &#123;</span><br><span class="line">str, err := bulkStringsHandler(c, head, r, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;RESP-Redis-Serialization-Protocol&quot;&gt;&lt;a href=&quot;#RESP-Redis-Serialization-Protocol&quot; class=&quot;headerlink&quot; title=&quot;RESP (Redis Serialization 
      
    
    </summary>
    
      <category term="redis" scheme="https://dreambo8563.github.io/categories/redis/"/>
    
    
      <category term="redis" scheme="https://dreambo8563.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Vue - vue-lazy-calc</title>
    <link href="https://dreambo8563.github.io/2019/03/19/Vue-vue-lazy-calc/"/>
    <id>https://dreambo8563.github.io/2019/03/19/Vue-vue-lazy-calc/</id>
    <published>2019-03-19T05:23:36.000Z</published>
    <updated>2019-03-29T07:54:08.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-lazy-calc"><a href="#vue-lazy-calc" class="headerlink" title="vue-lazy-calc"></a>vue-lazy-calc</h1><p><img src="https://raw.githubusercontent.com/dreambo8563/static-assets/master/calculator.jpg" alt=""></p><p>this is a just support simple calculation in lazy way.<br>(inspired by lodash)</p><p><strong>features</strong></p><ul><li>vue friendly</li><li>strong typed</li><li>lazy evaluation</li><li>chaining methods</li></ul><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install vue-lazy-calc --save</span><br></pre></td></tr></table></figure><h3 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lzCalc <span class="keyword">from</span> <span class="string">"vue-lazy-calc"</span></span><br><span class="line">Vue.use(lzCalc)</span><br></pre></td></tr></table></figure><h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><ul><li>this.\$lzCalc in Component context.</li><li>Vue.\$lzCalc in global.</li></ul><h3 id="API-list"><a href="#API-list" class="headerlink" title="API list"></a>API list</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> ILazyCalc &#123;</span><br><span class="line">  lazy(init?: <span class="built_in">number</span>): ILazyCalc</span><br><span class="line">  add(<span class="built_in">number</span>: <span class="built_in">number</span>): ILazyCalc</span><br><span class="line">  subtract(<span class="built_in">number</span>: <span class="built_in">number</span>): ILazyCalc</span><br><span class="line">  divide(y: <span class="built_in">number</span>): ILazyCalc</span><br><span class="line">  multiply(y: <span class="built_in">number</span>): ILazyCalc</span><br><span class="line">  round(precision?: <span class="built_in">number</span>): ILazyCalc</span><br><span class="line">  floor(precision?: <span class="built_in">number</span>): ILazyCalc</span><br><span class="line">  ceil(precision?: <span class="built_in">number</span>): ILazyCalc</span><br><span class="line">  <span class="keyword">do</span>(fn: operatorFunc): ILazyCalc</span><br><span class="line">  value(fallback?: <span class="built_in">any</span>): <span class="built_in">any</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>lazy =&gt; init a new instance with optional initValue</li><li>add/subtract/divide/multiple =&gt; + - * / (simple calculation)</li><li>round/floor/ceil =&gt; deal with precision of the float number</li><li>value =&gt; excute the declared method chain with optional fallBack value(if the result is NaN)</li><li>do =&gt; accept a custormized function for the number</li></ul><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p>(1+3)*2/3 with precision 2</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">this</span>.$lzCalc</span><br><span class="line">  .lazy(<span class="number">1</span>)</span><br><span class="line">  .add(<span class="number">3</span>)</span><br><span class="line">  .multiply(<span class="number">2</span>)</span><br><span class="line">  .divide(<span class="number">3</span>)</span><br><span class="line">  .round(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result.value()) <span class="comment">// 2.67</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addThree = result.add(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(addThree.value()) <span class="comment">// 2.67+ 3 =&gt;5.67</span></span><br></pre></td></tr></table></figure><ol><li>when declare the result variable, no calculation excuted until value()</li><li>you can reuse the declare variable</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue-lazy-calc&quot;&gt;&lt;a href=&quot;#vue-lazy-calc&quot; class=&quot;headerlink&quot; title=&quot;vue-lazy-calc&quot;&gt;&lt;/a&gt;vue-lazy-calc&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.gith
      
    
    </summary>
    
      <category term="vue" scheme="https://dreambo8563.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://dreambo8563.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue - vue-device-detector</title>
    <link href="https://dreambo8563.github.io/2019/03/12/Vue-vue-device-detector/"/>
    <id>https://dreambo8563.github.io/2019/03/12/Vue-vue-device-detector/</id>
    <published>2019-03-12T14:14:31.000Z</published>
    <updated>2019-03-29T07:54:08.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-device-detector"><a href="#vue-device-detector" class="headerlink" title="vue-device-detector"></a>vue-device-detector</h1><p><img src="https://raw.githubusercontent.com/dreambo8563/static-assets/master/watcher2.png" alt=""></p><p><strong>vue-device-detector</strong> is a simple vue plugin to inspect the device type.</p><ul><li>focus on mobile</li><li>vue friendly</li><li>strong typed</li></ul><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install vue-device-detector --save</span><br></pre></td></tr></table></figure><h3 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> device <span class="keyword">from</span> <span class="string">"vue-device-detector"</span></span><br><span class="line">Vue.use(device)</span><br></pre></td></tr></table></figure><h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><ul><li>this.\$device in Component context.</li><li>Vue.\$device in global.</li></ul><h3 id="API-list"><a href="#API-list" class="headerlink" title="API list"></a>API list</h3><p>you can get the following properties under this.\$device</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> IDeviceDetector &#123;</span><br><span class="line">  ios: <span class="built_in">Boolean</span></span><br><span class="line">  iphone: <span class="built_in">Boolean</span></span><br><span class="line">  iphoneX: <span class="built_in">Boolean</span></span><br><span class="line">  iPhoneXR: <span class="built_in">Boolean</span></span><br><span class="line">  iPhoneXSMax: <span class="built_in">Boolean</span></span><br><span class="line">  ipod: <span class="built_in">Boolean</span></span><br><span class="line">  ipad: <span class="built_in">Boolean</span></span><br><span class="line">  android: <span class="built_in">Boolean</span></span><br><span class="line">  androidPhone: <span class="built_in">Boolean</span></span><br><span class="line">  windows: <span class="built_in">Boolean</span></span><br><span class="line">  mobile: <span class="built_in">Boolean</span></span><br><span class="line">  dingding: <span class="built_in">Boolean</span> <span class="comment">//钉钉</span></span><br><span class="line">  wechat: <span class="built_in">Boolean</span> <span class="comment">// 微信</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>eg.<br>on iphoneX</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.$device.iphoneX) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.$device.ios) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.$device.android) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue-device-detector&quot;&gt;&lt;a href=&quot;#vue-device-detector&quot; class=&quot;headerlink&quot; title=&quot;vue-device-detector&quot;&gt;&lt;/a&gt;vue-device-detector&lt;/h1&gt;&lt;p&gt;&lt;i
      
    
    </summary>
    
      <category term="vue" scheme="https://dreambo8563.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://dreambo8563.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue - vue-storage-watcher</title>
    <link href="https://dreambo8563.github.io/2019/03/12/Vue-vue-storage-watcher/"/>
    <id>https://dreambo8563.github.io/2019/03/12/Vue-vue-storage-watcher/</id>
    <published>2019-03-12T13:52:27.000Z</published>
    <updated>2019-03-29T07:54:08.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-storage-watcher"><a href="#vue-storage-watcher" class="headerlink" title="vue-storage-watcher"></a>vue-storage-watcher</h1><p><img src="https://raw.githubusercontent.com/dreambo8563/static-assets/master/watcher1.png" alt=""></p><p>the real reactive watcher for localStorge.<br>I search a few days for a lib to watch the ls, but failed.</p><p>you can use this tiny ls wrapper which works well with vue.js.</p><p>you can use this as persistent data layer even instead of vuex.</p><ul><li>familiar usage just like <strong>bus</strong>.</li><li>reactive</li><li>type supported</li><li>small size</li></ul><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><blockquote><p>npm install vue-storage-watcher –save</p></blockquote><h3 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lsWatcher <span class="keyword">from</span> <span class="string">"vue-storage-watcher"</span></span><br><span class="line"></span><br><span class="line">Vue.use(lsWatcher, &#123; <span class="attr">prefix</span>: <span class="string">"myproject_"</span> &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>storage type</p></blockquote><ul><li>localStorage</li><li>sessionStorage</li></ul><h3 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h3><ul><li>prefix =&gt; default is “”</li><li>storage =&gt; default is “local” which means window.localStorage will be used as Storage Object. Another alternative is “session”</li></ul><h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><p>this.\$ls or this.\$ss in Component context for localStorage/sessionStorage<br>Vue.\$ls or Vue.\$ss in global.</p><blockquote><p>I will list basic api just with ls.</p></blockquote><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$ls.set(<span class="string">"token"</span>, <span class="string">"abccc"</span>)</span><br></pre></td></tr></table></figure><p>the value will be saved in storage with the <strong>prefix</strong> + key<br>and emit the changes to all the subscribers.</p><blockquote><p>you also can give the key an expire duration with the unit of ms</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$ls.set(<span class="string">"token"</span>, <span class="string">"abccc"</span>, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>the key will be expried in 3s, you will get null after that.</p><h4 id="ttl"><a href="#ttl" class="headerlink" title="ttl"></a>ttl</h4><p>ttl will return <strong>-1</strong> if one of the following scenarios happen:</p><ul><li>the key is non-exist</li><li>the key is already expired</li><li>the key has no expire time</li></ul><p>else return the remaining lifetime with ms as the unit</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$ls.ttl(<span class="string">"token"</span>)</span><br></pre></td></tr></table></figure><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$ls.get(<span class="string">"token"</span>, <span class="string">"default"</span>)</span><br></pre></td></tr></table></figure><p>get the value with a default return value if it’s not existed</p><h4 id="subscribe-the-key"><a href="#subscribe-the-key" class="headerlink" title="subscribe the key"></a>subscribe the key</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$ls.on(<span class="string">"token"</span>, callback)</span><br></pre></td></tr></table></figure><p>subscribe the key in the storage, will trigger the callback function if any changes happen.</p><p>the return value is the handler need to be used to unsubscribe</p><blockquote><p>tricky<br>there is an immediate options as a third args which will trigger cb immediate if set <strong>true</strong></p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$ls.on(<span class="string">"token"</span>, callback, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h4 id="unsubscribe-the-key"><a href="#unsubscribe-the-key" class="headerlink" title="unsubscribe the key"></a>unsubscribe the key</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> handler = <span class="keyword">this</span>.$ls.on(<span class="string">"token"</span>, cb)</span><br><span class="line"><span class="keyword">this</span>.$ls.off(<span class="string">"token"</span>, handler)</span><br></pre></td></tr></table></figure><blockquote><p>please make sure you unsubscribe beforeDestroy the component</p></blockquote><h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$ls.remove(<span class="string">"token"</span>)</span><br></pre></td></tr></table></figure><p>remove will delete the key in storage and emit all the subscribers with <strong>null</strong> value</p><h4 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$ls.clear()</span><br></pre></td></tr></table></figure><p>delete all the keys with your <strong>prefix</strong>. and all the subscribers will <strong>not</strong> receive changes any more</p><h4 id="init"><a href="#init" class="headerlink" title="init"></a>init</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$ls.init()</span><br></pre></td></tr></table></figure><p>init will set all your current localStorge keys into the plugins</p><ul><li>add prefix for all the keys</li></ul><p>and then you can use <strong>get</strong> and <strong>on</strong> mehtod to make them reactive</p><h3 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h3><ul><li>if you want to using localStorage and sessionStorage at same page, pls use the plugin as following</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lsWatcher <span class="keyword">from</span> <span class="string">"vue-storage-watcher"</span></span><br><span class="line"></span><br><span class="line">Vue.use(&#123; ...lsWatcher &#125;, &#123; <span class="attr">prefix</span>: <span class="string">"myproject_"</span> &#125;)</span><br><span class="line"></span><br><span class="line">Vue.use(&#123; ...lsWatcher &#125;, &#123; <span class="attr">prefix</span>: <span class="string">"myproject_ss_"</span>, <span class="attr">storage</span>: <span class="string">"session"</span> &#125;)</span><br></pre></td></tr></table></figure><ul><li>possibly polyfill</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// wather polyfill for IE 11</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"core-js/fn/symbol"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"core-js/fn/map"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue-storage-watcher&quot;&gt;&lt;a href=&quot;#vue-storage-watcher&quot; class=&quot;headerlink&quot; title=&quot;vue-storage-watcher&quot;&gt;&lt;/a&gt;vue-storage-watcher&lt;/h1&gt;&lt;p&gt;&lt;i
      
    
    </summary>
    
      <category term="vue" scheme="https://dreambo8563.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://dreambo8563.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>玩耍github</title>
    <link href="https://dreambo8563.github.io/2019/01/22/%E7%8E%A9%E8%80%8Dgithub/"/>
    <id>https://dreambo8563.github.io/2019/01/22/玩耍github/</id>
    <published>2019-01-22T06:10:13.000Z</published>
    <updated>2019-01-22T06:17:59.336Z</updated>
    
    <content type="html"><![CDATA[<h3 id="badge"><a href="#badge" class="headerlink" title="badge"></a>badge</h3><p>最近给自己的一个 repo 加了一些 badge, 效果如下:</p><p><img src="https://raw.githubusercontent.com/dreambo8563/static-assets/master/github_badge.png" alt=""></p><h3 id="PR-flow"><a href="#PR-flow" class="headerlink" title="PR flow"></a>PR flow</h3><p>对应这些 badge 的是一些 github 的插件, 他们有在整个代码流程中起到不同的作用</p><p>先预览下一个 RP 过程:</p><p><img src="https://raw.githubusercontent.com/dreambo8563/static-assets/master/github_pr.png" alt=""></p><ul><li>测试覆盖率检查</li><li>代码 lint 和常见错误检查</li><li>CI 自动化测试</li><li>自动代码 review</li></ul><p>如果过程中有问题,他会给你的 RP 打 x 表示有东西需要 fix, 符合规范.<br>这个体验如果能够在日常工作开发中使用就是极好, 不知道 jenkins 的那些插件能不能达到这样的效果</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;badge&quot;&gt;&lt;a href=&quot;#badge&quot; class=&quot;headerlink&quot; title=&quot;badge&quot;&gt;&lt;/a&gt;badge&lt;/h3&gt;&lt;p&gt;最近给自己的一个 repo 加了一些 badge, 效果如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://r
      
    
    </summary>
    
      <category term="github" scheme="https://dreambo8563.github.io/categories/github/"/>
    
    
      <category term="github" scheme="https://dreambo8563.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Element - 偷偷引用内部方法</title>
    <link href="https://dreambo8563.github.io/2019/01/18/Element-%E5%81%B7%E5%81%B7%E5%BC%95%E7%94%A8%E5%86%85%E9%83%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://dreambo8563.github.io/2019/01/18/Element-偷偷引用内部方法/</id>
    <published>2019-01-18T02:55:07.000Z</published>
    <updated>2019-03-29T07:53:07.162Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Element-ui-源码的财富"><a href="#Element-ui-源码的财富" class="headerlink" title="Element-ui 源码的财富"></a>Element-ui 源码的财富</h3><p>源码里面自带了很多小函数, 甚至是指令等东西. 很多都值得我们去阅读和学习.</p><h3 id="懒"><a href="#懒" class="headerlink" title="懒"></a>懒</h3><ul><li>不想自己造轮子</li><li>不想再引入更多的包</li><li>源码里有能不能用?</li></ul><h3 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  getFirstDayOfMonth,</span><br><span class="line">  nextDate</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"element-ui/packages/date-picker/src/util"</span></span><br></pre></td></tr></table></figure><p>这样 <strong>import</strong> 就会引入 <a href="https://github.com/ElemeFE/element/blob/dev/packages/date-picker/src/util/index.js" target="_blank" rel="noopener">https://github.com/ElemeFE/element/blob/dev/packages/date-picker/src/util/index.js</a> 这个文件里面 export 的方法. 其他类似</p><p><strong>element-ui</strong> 空间默认走的 src 目录</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Element-ui-源码的财富&quot;&gt;&lt;a href=&quot;#Element-ui-源码的财富&quot; class=&quot;headerlink&quot; title=&quot;Element-ui 源码的财富&quot;&gt;&lt;/a&gt;Element-ui 源码的财富&lt;/h3&gt;&lt;p&gt;源码里面自带了很多小函数, 
      
    
    </summary>
    
      <category term="vue" scheme="https://dreambo8563.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://dreambo8563.github.io/tags/vue/"/>
    
      <category term="element" scheme="https://dreambo8563.github.io/tags/element/"/>
    
  </entry>
  
  <entry>
    <title>2018年度总结</title>
    <link href="https://dreambo8563.github.io/2018/12/29/2018%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://dreambo8563.github.io/2018/12/29/2018年度总结/</id>
    <published>2018-12-29T14:05:50.000Z</published>
    <updated>2019-03-22T06:16:29.699Z</updated>
    
    <content type="html"><![CDATA[<h3 id="纪念即将过去的-2018"><a href="#纪念即将过去的-2018" class="headerlink" title="纪念即将过去的 2018"></a>纪念即将过去的 2018</h3><h4 id="奔波"><a href="#奔波" class="headerlink" title="奔波"></a>奔波</h4><p>这一年我又经历了两份工作, 一份短暂的全栈开发. 一份前端架构.<br>这两个 title 都是第一次拿, 也算不同的小经历吧. 总结下来就是给了自己一个确定性的答案, 后端的事我也可以做,而且是有能力做好的, 但还是需要时间的积累, 全栈的经历只是证明了这个门槛我可以跨,但还没有证明,我已经完全进入状态.</p><p>架构的 title, 比较虚. 但工作环境让我可以抛开单纯的前端开发,更多的思考团队相关, 工程相关的事情.</p><h4 id="技术内容"><a href="#技术内容" class="headerlink" title="技术内容"></a>技术内容</h4><h5 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h5><p>这一年我彻底投入到 golang 中, 不像之前用 scala 的时候, 那时候的学习和应用太浅了, 虽然是在生产上用,但不是自己一点点学习积累上来的,所以很快就会忘记. 或者说那个语言不适合自己的知识能力.<br>golang 相对更容易入门, 而且比较接近 ts, 所以接受度会比较高. 加上也有明星产品,所以选择了他.<br>今年的很多 demo 都是基于 golang 的. 也读了一些库的源码. 用了一些 golang 生态的工具. prometheus, docker, k8s, jaeger, nats ,gin, echo,grpc,etcd 等等, 还用 golang 刷了些 leecode 的算法题</p><h5 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h5><p>到现在接触 Vue 有 1 年多一些了, 慢慢熟悉 vue 的生态和基本的使用, 建立完善基于 vue-cli 的脚手架,是个不错的开始. 写了一个简单的开源组件库 @bpit/vue, 工作中也仍然在不断摸索和实践相关 api 和一些用法. 还写了 vue 的单元测试. vue 3.0 将用 ts 编写,到时候会是个很好的学习机会. 哦对了今年还帮以前的同事开发了一个微信小程序, 也算 vue 相关的经历吧.</p><h4 id="团队工具"><a href="#团队工具" class="headerlink" title="团队工具"></a>团队工具</h4><p>今年调研了很多工具, 比如 sentry, easy mock. sonar qube, jenkins 找到了 检查代码圈复杂度, 重复率的 vsc 插件. 也写了两个提供开发效率的工具插件. 还有些非技术的努力, 比如知识习惯的熏陶, mentor 制度的订立等. 脾气什么的, 我只能 哎!!! 继续努力吧</p><h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><ul><li>github 截止到现在 贡献数 591(新高), 新建 repo 大约 30 个,基本都是自己的学习 demo</li><li>blog 42 篇(算上这篇)</li><li>书籍 这个不好统计,大致数了下微信读书和阅读器里的书本, 不少于 25 本技术相关书籍, 在线文档数量无法统计</li></ul><p><img src="https://raw.githubusercontent.com/dreambo8563/static-assets/master/2018_blogs.png" alt=""><br><img src="https://raw.githubusercontent.com/dreambo8563/static-assets/master/2018_github.png" alt=""></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>2018 从数据上看,比 2017 年有进步, 17 年工作上实在太忙了, 总结和积累都不太够. 18 年算是迈了一大步.<br>同时也确定了方向, 打开了后端运维的大门.<br>Good!</p><p><img src="https://raw.githubusercontent.com/dreambo8563/static-assets/master/2018_2019_FE_Working_Summary.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;纪念即将过去的-2018&quot;&gt;&lt;a href=&quot;#纪念即将过去的-2018&quot; class=&quot;headerlink&quot; title=&quot;纪念即将过去的 2018&quot;&gt;&lt;/a&gt;纪念即将过去的 2018&lt;/h3&gt;&lt;h4 id=&quot;奔波&quot;&gt;&lt;a href=&quot;#奔波&quot; class=&quot;
      
    
    </summary>
    
      <category term="Thinking" scheme="https://dreambo8563.github.io/categories/Thinking/"/>
    
    
      <category term="Thinking" scheme="https://dreambo8563.github.io/tags/Thinking/"/>
    
  </entry>
  
  <entry>
    <title>Makefile简单脚本应用</title>
    <link href="https://dreambo8563.github.io/2018/12/18/Makefile%E7%AE%80%E5%8D%95%E8%84%9A%E6%9C%AC%E5%BA%94%E7%94%A8/"/>
    <id>https://dreambo8563.github.io/2018/12/18/Makefile简单脚本应用/</id>
    <published>2018-12-18T10:23:14.000Z</published>
    <updated>2018-12-18T10:29:31.694Z</updated>
    
    <content type="html"><![CDATA[<h4 id="老看人家用-我也试一试"><a href="#老看人家用-我也试一试" class="headerlink" title="老看人家用,我也试一试"></a>老看人家用,我也试一试</h4><p>主要想避免路径的问题:</p><p>例如:<br>我在 scripts/start.sh</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f deployments/k8s/conf.yaml</span><br></pre></td></tr></table></figure><p>希望是以当前目标为路径,来执行这个 shell. 避免别人进入 scripts 目录后执行(那样会报错, 目录不对了)</p><h4 id="所以-Makefile-吧"><a href="#所以-Makefile-吧" class="headerlink" title="所以 - Makefile 吧"></a>所以 - Makefile 吧</h4><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">v?=latest</span><br><span class="line"></span><br><span class="line"><span class="section">local:</span></span><br><span class="line">go run cmd/app/main.go</span><br><span class="line"><span class="section">start:</span></span><br><span class="line">bash scripts/start.sh</span><br><span class="line"><span class="section">stop:</span></span><br><span class="line">bash scripts/stop.sh</span><br><span class="line"><span class="section">docker:</span></span><br><span class="line">docker build -f build/Dockerfile -t todo/backend:<span class="variable">$(v)</span> .</span><br><span class="line">docker tag todo/backend:<span class="variable">$(v)</span> dreambo8563docker/todo-backend:<span class="variable">$(v)</span></span><br><span class="line">docker push dreambo8563docker/todo-backend:<span class="variable">$(v)</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -f cmd/app/*log app</span><br></pre></td></tr></table></figure><p>这里我用了一个变量 v,用于 docker 打包镜像设置 version 用. 默认 latest</p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">make local =&gt; 本地启动项目</span><br><span class="line">make <span class="built_in">start</span> =&gt; 执行k8s脚本</span><br><span class="line">make stop =&gt; 执行k8s脚本</span><br><span class="line">make docker v=v22 打包镜像, tag / push</span><br><span class="line">make clean =&gt; 删除临时文件 (日志啥的)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;老看人家用-我也试一试&quot;&gt;&lt;a href=&quot;#老看人家用-我也试一试&quot; class=&quot;headerlink&quot; title=&quot;老看人家用,我也试一试&quot;&gt;&lt;/a&gt;老看人家用,我也试一试&lt;/h4&gt;&lt;p&gt;主要想避免路径的问题:&lt;/p&gt;
&lt;p&gt;例如:&lt;br&gt;我在 scrip
      
    
    </summary>
    
      <category term="Shell" scheme="https://dreambo8563.github.io/categories/Shell/"/>
    
    
      <category term="Makefile" scheme="https://dreambo8563.github.io/tags/Makefile/"/>
    
      <category term="Shell" scheme="https://dreambo8563.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>golang-grpc Client BL</title>
    <link href="https://dreambo8563.github.io/2018/12/12/golang-grpc-Client-BL/"/>
    <id>https://dreambo8563.github.io/2018/12/12/golang-grpc-Client-BL/</id>
    <published>2018-12-12T05:32:21.000Z</published>
    <updated>2018-12-12T05:52:18.532Z</updated>
    
    <content type="html"><![CDATA[<h3 id="GRPC-LoadBalance"><a href="#GRPC-LoadBalance" class="headerlink" title="GRPC LoadBalance"></a>GRPC LoadBalance</h3><p>这此主要描述下客户端做 LB</p><ul><li>LB 算法有限 (roundrobin)</li><li>客户端要支持</li><li>service 需要 headless 模式</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(</span><br><span class="line">    <span class="string">"google.golang.org/grpc/balancer/roundrobin"</span></span><br><span class="line">    <span class="string">"google.golang.org/grpc/resolver"</span></span><br><span class="line">)</span><br><span class="line">resolver.SetDefaultScheme(<span class="string">"dns"</span>)</span><br><span class="line">conn, err = grpc.Dial(authRPCServiceURL, grpc.WithInsecure(), grpc.WithBlock(), grpc.WithTimeout(<span class="number">2</span>*time.Second), grpc.WithBalancerName(roundrobin.Name), grpc.WithUnaryInterceptor(otgrpc.OpenTracingClientInterceptor(tracer)), grpc.WithStreamInterceptor(</span><br><span class="line">otgrpc.OpenTracingStreamClientInterceptor(tracer)))</span><br></pre></td></tr></table></figure><h4 id="k8s-service"><a href="#k8s-service" class="headerlink" title="k8s service"></a>k8s service</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="attr">clusterIP:</span> <span class="string">None</span></span><br></pre></td></tr></table></figure><p>客户端 LB, 这样做法比较简单, 不用引入 service mesh 的方式<br>但就是 LB 的算法太过单一,没有太强大的功能</p><h4 id="references"><a href="#references" class="headerlink" title="references"></a>references</h4><p><a href="https://github.com/jtattermusch/grpc-loadbalancing-kubernetes-examples" target="_blank" rel="noopener">https://github.com/jtattermusch/grpc-loadbalancing-kubernetes-examples</a></p><p><a href="https://github.com/dreambo8563/static-assets/blob/master/grpc_loadbalancing_kubernetes_slides.pdf" target="_blank" rel="noopener">https://github.com/dreambo8563/static-assets/blob/master/grpc_loadbalancing_kubernetes_slides.pdf</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;GRPC-LoadBalance&quot;&gt;&lt;a href=&quot;#GRPC-LoadBalance&quot; class=&quot;headerlink&quot; title=&quot;GRPC LoadBalance&quot;&gt;&lt;/a&gt;GRPC LoadBalance&lt;/h3&gt;&lt;p&gt;这此主要描述下客户端做 LB
      
    
    </summary>
    
      <category term="Golang" scheme="https://dreambo8563.github.io/categories/Golang/"/>
    
      <category term="分布式" scheme="https://dreambo8563.github.io/categories/Golang/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="Golang" scheme="https://dreambo8563.github.io/tags/Golang/"/>
    
      <category term="分布式" scheme="https://dreambo8563.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>golang-Trace链路跟踪实践</title>
    <link href="https://dreambo8563.github.io/2018/12/05/golang-Trace%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA%E5%AE%9E%E8%B7%B5/"/>
    <id>https://dreambo8563.github.io/2018/12/05/golang-Trace链路跟踪实践/</id>
    <published>2018-12-05T09:51:45.000Z</published>
    <updated>2018-12-06T01:49:05.669Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Tracing-系统是监控的一个方面"><a href="#Tracing-系统是监控的一个方面" class="headerlink" title="Tracing 系统是监控的一个方面"></a>Tracing 系统是监控的一个方面</h3><h4 id="基础层面跟踪"><a href="#基础层面跟踪" class="headerlink" title="基础层面跟踪"></a>基础层面跟踪</h4><p>有很多工具是可以在 k8s 这种容器化环境里自动追踪到, 服务间的调用的. 甚至记录下一些性能相关的信息, 并生成链路的图表</p><h3 id="Tracing-系统-侧重"><a href="#Tracing-系统-侧重" class="headerlink" title="Tracing 系统 侧重"></a>Tracing 系统 侧重</h3><ul><li>ELK/EFK - 侧重 log</li><li>Promethuse - 侧重 metrics</li><li>Tracing 侧重链路, 兼顾 log 和 metrics</li></ul><h4 id="Golang-生态下的例子"><a href="#Golang-生态下的例子" class="headerlink" title="Golang 生态下的例子"></a>Golang 生态下的例子</h4><h3 id="初试设定"><a href="#初试设定" class="headerlink" title="初试设定"></a>初试设定</h3><ul><li>一个 backend 组合服务</li><li>一个 jwt auth 服务</li></ul><p>— Login 接口会根据 userID 生成 jwt token<br>我们就跟踪这个路径</p><h3 id="创建-tracer"><a href="#创建-tracer" class="headerlink" title="创建 tracer"></a>创建 tracer</h3><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tracing</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"></span><br><span class="line">opentracing <span class="string">"github.com/opentracing/opentracing-go"</span></span><br><span class="line">jaeger <span class="string">"github.com/uber/jaeger-client-go"</span></span><br><span class="line">config <span class="string">"github.com/uber/jaeger-client-go/config"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="comment">// Tracer - tracer instance</span></span><br><span class="line">Tracer opentracing.Tracer</span><br><span class="line"><span class="comment">// Closer - Closer instance</span></span><br><span class="line">Closer io.Closer</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Init returns an instance of Jaeger Tracer that samples 100% of traces and logs all spans to stdout.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">(service <span class="keyword">string</span>)</span> <span class="params">(opentracing.Tracer, io.Closer)</span></span> &#123;</span><br><span class="line">cfg, err := config.FromEnv()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"ERROR: cannot init Jaeger Conf from ENV: %v\n"</span>, err))</span><br><span class="line">&#125;</span><br><span class="line">cfg.Sampler = &amp;config.SamplerConfig&#123;</span><br><span class="line">Type:  <span class="string">"const"</span>,</span><br><span class="line">Param: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line">cfg.Reporter = &amp;config.ReporterConfig&#123;</span><br><span class="line">LogSpans: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tracer, closer, err := cfg.New(service, config.Logger(jaeger.StdLogger))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"ERROR: cannot init Jaeger: %v\n"</span>, err))</span><br><span class="line">&#125;</span><br><span class="line">Tracer, Closer = tracer, closer</span><br><span class="line"><span class="comment">// in order to use StartSpanFromContext, we need SetGlobalTracer</span></span><br><span class="line">opentracing.SetGlobalTracer(Tracer)</span><br><span class="line"><span class="keyword">return</span> tracer, closer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 main 里初始化<br>确定 Service Name</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">tracing.Init(<span class="string">"todo-backend-service"</span>)</span><br><span class="line"><span class="keyword">defer</span> tracing.Closer.Close()</span><br></pre></td></tr></table></figure><h4 id="创建-span"><a href="#创建-span" class="headerlink" title="创建 span"></a>创建 span</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoginHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">tracer := tracing.Tracer</span><br><span class="line">span := tracer.StartSpan(<span class="string">"LoginHandler"</span>)</span><br><span class="line">    <span class="keyword">defer</span> span.Finish()</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取-userID-子-span"><a href="#获取-userID-子-span" class="headerlink" title="获取 userID, 子 span"></a>获取 userID, 子 span</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">ctx := opentracing.ContextWithSpan(context.Background(), span)</span><br><span class="line"><span class="comment">// 此处模拟检查用户,获取uid过程</span></span><br><span class="line">user.NewUID(ctx)</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NewUID - generate uid for a user</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span> <span class="title">NewUID</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">span, _ := opentracing.StartSpanFromContext(ctx, <span class="string">"NewUID"</span>)</span><br><span class="line"><span class="keyword">defer</span> span.Finish()</span><br><span class="line">u.ID = strconv.Itoa(rand.New(rand.NewSource(time.Now().UnixNano())).Int())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-通过-http-调用-auth-服务"><a href="#1-通过-http-调用-auth-服务" class="headerlink" title="1. 通过 http 调用 auth  服务"></a>1. 通过 http 调用 auth  服务</h4><p>tracing 的相关信息是在 header 里带给目标服务的</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">ext.SpanKindRPCClient.Set(span)</span><br><span class="line">ext.HTTPUrl.Set(span, authGetTokenURL)</span><br><span class="line">ext.HTTPMethod.Set(span, <span class="string">"POST"</span>)</span><br><span class="line">span.Tracer().Inject(</span><br><span class="line">span.Context(),</span><br><span class="line">opentracing.HTTPHeaders,</span><br><span class="line">opentracing.HTTPHeadersCarrier(header),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="2-通过-grpc-调用-auth-服务"><a href="#2-通过-grpc-调用-auth-服务" class="headerlink" title="2. 通过 grpc 调用 auth  服务"></a>2. 通过 grpc 调用 auth  服务</h4><p>初始化 grpc conn, 注意使用 otgrpc</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//InitAuthRPC -</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitAuthRPC</span><span class="params">(tracer opentracing.Tracer)</span> *<span class="title">grpc</span>.<span class="title">ClientConn</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">log.Info(<span class="string">"grpc addr"</span>, zap.String(<span class="string">"addr"</span>, authRPCServiceURL))</span><br><span class="line">conn, err = grpc.Dial(authRPCServiceURL, grpc.WithInsecure(), grpc.WithBlock(), grpc.WithTimeout(<span class="number">2</span>*time.Second), grpc.WithUnaryInterceptor(otgrpc.OpenTracingClientInterceptor(tracer)), grpc.WithStreamInterceptor(</span><br><span class="line">otgrpc.OpenTracingStreamClientInterceptor(tracer)))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"did not connect"</span>, zap.String(<span class="string">"err"</span>, err.Error()))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> conn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>… 生成 protobuf</li><li>…生成 go 文件</li><li>…调用</li><li>otgrpc 会帮助把 trace 信息  序列化反序列,已保持连贯</li></ul><h4 id="被调用-Auth-端-http"><a href="#被调用-Auth-端-http" class="headerlink" title="被调用 Auth 端 http"></a>被调用 Auth 端 http</h4><p>Extract 出 tracer</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">tracer := tracing.Tracer</span><br><span class="line">spanCtx, _ := tracer.Extract(opentracing.HTTPHeaders, opentracing.HTTPHeadersCarrier(c.Request.Header))</span><br><span class="line">span := tracer.StartSpan(<span class="string">"JWTNewTokenHandler"</span>, ext.RPCServerOption(spanCtx))</span><br><span class="line">fmt.Println(c.Request.Header)</span><br><span class="line"><span class="keyword">defer</span> span.Finish()</span><br></pre></td></tr></table></figure><h4 id="被调用-RPC"><a href="#被调用-RPC" class="headerlink" title="被调用 RPC"></a>被调用 RPC</h4><p><code>StartSpanFromContext</code></p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">span, childCtx := opentracing.StartSpanFromContext(ctx, <span class="string">"SayHello"</span>)</span><br><span class="line"><span class="keyword">defer</span> span.Finish()</span><br><span class="line">span.SetTag(<span class="string">"UID"</span>, in.Name)</span><br></pre></td></tr></table></figure><h3 id="设置-tag"><a href="#设置-tag" class="headerlink" title="设置 tag"></a>设置 tag</h3><pre><code>span.SetTag(&quot;UID&quot;, reqParams.ID)</code></pre><h3 id="携带-log"><a href="#携带-log" class="headerlink" title="携带 log"></a>携带 log</h3><pre><code>span.LogKV(&quot;event&quot;, &quot;jwt success&quot;, &quot;token&quot;, token)</code></pre><h3 id="跟踪后台-Jaeger"><a href="#跟踪后台-Jaeger" class="headerlink" title="跟踪后台 Jaeger"></a>跟踪后台 Jaeger</h3><p>使用 docker 或者二进制直接启动</p><h3 id="IMG"><a href="#IMG" class="headerlink" title="IMG"></a>IMG</h3><p> - 链路记录</p><p><img src="https://raw.githubusercontent.com/dreambo8563/static-assets/master/trace1.png" alt=""></p><ul><li>RPC 记录详情</li></ul><p><img src="https://raw.githubusercontent.com/dreambo8563/static-assets/master/trace_rpc.png" alt=""></p><ul><li>HTTP 记录详情</li></ul><p><img src="https://raw.githubusercontent.com/dreambo8563/static-assets/master/trace_http.png" alt=""></p><ul><li>比较 记录详情</li></ul><p><img src="https://raw.githubusercontent.com/dreambo8563/static-assets/master/trace_compare.png" alt=""></p><p>我们可以明显看到 rpc 方式在性能上的优势…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Tracing-系统是监控的一个方面&quot;&gt;&lt;a href=&quot;#Tracing-系统是监控的一个方面&quot; class=&quot;headerlink&quot; title=&quot;Tracing 系统是监控的一个方面&quot;&gt;&lt;/a&gt;Tracing 系统是监控的一个方面&lt;/h3&gt;&lt;h4 id=&quot;基
      
    
    </summary>
    
      <category term="Golang" scheme="https://dreambo8563.github.io/categories/Golang/"/>
    
      <category term="分布式" scheme="https://dreambo8563.github.io/categories/Golang/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="Golang" scheme="https://dreambo8563.github.io/tags/Golang/"/>
    
      <category term="分布式" scheme="https://dreambo8563.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>前端独立部署,最小docker化实践</title>
    <link href="https://dreambo8563.github.io/2018/10/30/%E5%89%8D%E7%AB%AF%E7%8B%AC%E7%AB%8B%E9%83%A8%E7%BD%B2-%E6%9C%80%E5%B0%8Fdocker%E5%8C%96%E5%AE%9E%E8%B7%B5/"/>
    <id>https://dreambo8563.github.io/2018/10/30/前端独立部署-最小docker化实践/</id>
    <published>2018-10-30T04:21:47.000Z</published>
    <updated>2018-10-30T04:36:30.900Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前端容器化-为了能够独立进行部署-配备-nginx"><a href="#前端容器化-为了能够独立进行部署-配备-nginx" class="headerlink" title="前端容器化, 为了能够独立进行部署, 配备 nginx"></a>前端容器化, 为了能够独立进行部署, 配备 nginx</h3><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><p>这里利用 docker 的 MultiStage 特性,区分打包和生产镜像的 build.<br>注意顺序,为了利用潜在的 cache 提高打包速度<br>只把生成的 dist 内容放到 nginx 里面, 并且放入自己的 nginx 配置, 毕竟默认配置不能满足 SPA 项目</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">9.11</span>.<span class="number">1</span>-alpine as build-stage</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/src/app</span></span><br><span class="line"><span class="bash">WORKDIR /usr/src/app</span></span><br><span class="line"><span class="bash">COPY package*.json /usr/src/app/</span></span><br><span class="line"><span class="bash">RUN npm install</span></span><br><span class="line"><span class="bash">COPY . .</span></span><br><span class="line"><span class="bash">RUN npm run build</span></span><br><span class="line"><span class="bash"><span class="comment"># production stage</span></span></span><br><span class="line"><span class="bash">FROM nginx:1.13.12-alpine as production-stage</span></span><br><span class="line"><span class="bash">COPY --from=build-stage /usr/src/app/dist /usr/share/nginx/html</span></span><br><span class="line"><span class="bash">COPY ./nginx/nginx.conf /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="bash">COPY ./nginx/sites-enabled /etc/nginx/sites-enabled</span></span><br><span class="line"><span class="bash">COPY ./nginx/general.conf /etc/nginx/general.conf</span></span><br><span class="line"><span class="bash">EXPOSE 80</span></span><br><span class="line"><span class="bash">CMD [<span class="string">"nginx"</span>, <span class="string">"-g"</span>, <span class="string">"daemon off;"</span>]</span></span><br></pre></td></tr></table></figure><h4 id="nginx-相关配置目录"><a href="#nginx-相关配置目录" class="headerlink" title="nginx 相关配置目录"></a>nginx 相关配置目录</h4><p>在项目根目录下放置 nginx 目录<br>是一些常规配置.<br>特意开放了 gzip_static, 以备后续前端优化使用.</p><p>-nginx<br>|——sites_enabled<br>|——–example.com.conf<br>|–general.conf<br>|–nginx.conf</p><p><strong>nginx.conf</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#user www-data;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line">worker_processes auto;</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">multi_accept on;</span><br><span class="line">worker_connections 65535;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">charset utf-8;</span><br><span class="line">sendfile on;</span><br><span class="line">tcp_nopush on;</span><br><span class="line">tcp_nodelay on;</span><br><span class="line">server_tokens off;</span><br><span class="line">log_not_found off;</span><br><span class="line">types_hash_max_size 2048;</span><br><span class="line">client_max_body_size 16M;</span><br><span class="line"></span><br><span class="line"># MIME</span><br><span class="line">include mime.types;</span><br><span class="line">default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line"># logging</span><br><span class="line">access_log /var/log/nginx/access.log;</span><br><span class="line">error_log /var/log/nginx/error.log warn;</span><br><span class="line"></span><br><span class="line"># load configs</span><br><span class="line"># include /etc/nginx/conf.d/*.conf;</span><br><span class="line">include /etc/nginx/sites-enabled/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>general.conf</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># security headers</span><br><span class="line">add_header X-Frame-Options &quot;SAMEORIGIN&quot; always;</span><br><span class="line">add_header X-XSS-Protection &quot;1; mode=block&quot; always;</span><br><span class="line">add_header X-Content-Type-Options &quot;nosniff&quot; always;</span><br><span class="line">add_header Referrer-Policy &quot;no-referrer-when-downgrade&quot; always;</span><br><span class="line">add_header Content-Security-Policy &quot;default-src * data: &apos;unsafe-eval&apos; &apos;unsafe-inline&apos;&quot; always;</span><br><span class="line"></span><br><span class="line"># . files</span><br><span class="line">location ~ /\. &#123;</span><br><span class="line">deny all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># assets, media</span><br><span class="line">location ~* \.(?:css(\.map)?|js(\.map)?|jpe?g|png|gif|ico|cur|heic|webp|tiff?|mp3|m4a|aac|ogg|midi?|wav|mp4|mov|webm|mpe?g|avi|ogv|flv|wmv)$ &#123;</span><br><span class="line">expires 30d;</span><br><span class="line">access_log off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># svg, fonts</span><br><span class="line">location ~* \.(?:svgz?|ttf|ttc|otf|eot|woff2?)$ &#123;</span><br><span class="line">add_header Access-Control-Allow-Origin &quot;*&quot;;</span><br><span class="line">expires 30d;</span><br><span class="line">access_log off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># gzip</span><br><span class="line">gzip on;</span><br><span class="line">gzip_vary on;</span><br><span class="line">gzip_staticon;</span><br><span class="line">gzip_proxied any;</span><br><span class="line">gzip_comp_level 6;</span><br><span class="line">gzip_types text/plain text/css text/xml application/json application/javascript application/xml+rss application/atom+xml image/svg+xml;</span><br></pre></td></tr></table></figure><p><strong>example.com.conf</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">root /usr/share/nginx/html;</span><br><span class="line">index index.html index.htm;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">try_files $uri $uri/ /index.html;</span><br><span class="line">  &#125;</span><br><span class="line">include /etc/nginx/general.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="以防不需要的-或者隐秘的文件被打入镜像-需要-dockerignore"><a href="#以防不需要的-或者隐秘的文件被打入镜像-需要-dockerignore" class="headerlink" title="以防不需要的,或者隐秘的文件被打入镜像. 需要 .dockerignore"></a>以防不需要的,或者隐秘的文件被打入镜像. 需要 .dockerignore</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node_modules</span><br><span class="line">npm-debug.log</span><br><span class="line">Dockerfile*</span><br><span class="line">docker-compose*</span><br><span class="line">.dockerignore</span><br><span class="line">.git</span><br><span class="line">.gitignore</span><br><span class="line">.env</span><br><span class="line">*/bin</span><br><span class="line">*/obj</span><br><span class="line">README.md</span><br><span class="line">LICENSE</span><br><span class="line">.vscode</span><br></pre></td></tr></table></figure><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>如果你的项目用了 sass, 注意你打包的网络, 因为我们都是使用的最小基础 alpine 镜像,没有 py 环境.如果不能下载 sass 包会打包失败.</p><blockquote><p>docker build -t vue-docker:v1 .</p></blockquote><h3 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h3><blockquote><p>docker run -p 8080:80 -d vue-docker:v1</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前端容器化-为了能够独立进行部署-配备-nginx&quot;&gt;&lt;a href=&quot;#前端容器化-为了能够独立进行部署-配备-nginx&quot; class=&quot;headerlink&quot; title=&quot;前端容器化, 为了能够独立进行部署, 配备 nginx&quot;&gt;&lt;/a&gt;前端容器化, 为了
      
    
    </summary>
    
      <category term="Docker" scheme="https://dreambo8563.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://dreambo8563.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>关于opener的安全小技巧</title>
    <link href="https://dreambo8563.github.io/2018/10/10/%E5%85%B3%E4%BA%8Eopener%E7%9A%84%E5%AE%89%E5%85%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://dreambo8563.github.io/2018/10/10/关于opener的安全小技巧/</id>
    <published>2018-10-10T06:05:05.000Z</published>
    <updated>2018-10-30T04:22:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="window-open"><a href="#window-open" class="headerlink" title="window.open()"></a>window.open()</h3><blockquote><p>var window = window.open(url, windowName, [windowFeatures]);</p></blockquote><p>本文主要针对 <strong>_blank</strong>的情况,</p><p> 本文主要讲的就是 windowFeature 中的 <strong>noopener</strong></p><p>当我们需要以另一个窗口的形式打开一个地址的时候, 我们常用的</p><blockquote><p>window.open(url,”_blank”)</p></blockquote><p>但由于安全方面的考虑我们需要加上个小参数, 就是 <strong>noopener</strong></p><blockquote><p>修正后: window.open(url,”_blank”,”noopener”)</p></blockquote><h3 id="window-opener"><a href="#window-opener" class="headerlink" title="window.opener"></a>window.opener</h3><p>问题就在于这个 opener 对象, 如果不加 <strong>noopener</strong></p><p>当我们用 window.open 打开一个新窗口的时候, 我们在新建的窗口里可以拿到 window.opener, 这样  我们就能获取到原窗口  的对象. <br>如果新窗口打开的  不是自己控制的页面,那人家拿到 window 对象,能做不少事情</p><blockquote><p>Lighthouse 的检查里也会检查这一项</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;window-open&quot;&gt;&lt;a href=&quot;#window-open&quot; class=&quot;headerlink&quot; title=&quot;window.open()&quot;&gt;&lt;/a&gt;window.open()&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;var window = wind
      
    
    </summary>
    
      <category term="JS" scheme="https://dreambo8563.github.io/categories/JS/"/>
    
    
      <category term="JS" scheme="https://dreambo8563.github.io/tags/JS/"/>
    
      <category term="Security" scheme="https://dreambo8563.github.io/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>CSS-Collections-Buttons-4</title>
    <link href="https://dreambo8563.github.io/2018/09/26/CSS-Collections-Buttons-4/"/>
    <id>https://dreambo8563.github.io/2018/09/26/CSS-Collections-Buttons-4/</id>
    <published>2018-09-26T01:24:06.000Z</published>
    <updated>2018-09-26T01:25:09.598Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h3><p><style><br>.underline–magical {<br>  background-image: linear-gradient(120deg, #84fab0 0%, #8fd3f4 100%);<br>  background-repeat: no-repeat;<br>  background-size: 100% 0.2em;<br>  background-position: 0 88%;<br>  transition: background-size 0.25s ease-in;<br>}<br>.underline–magical:hover {<br>  background-size: 100% 88%;<br>}<br></style></p><p></p><h1>Look At This <span class="underline--magical">Pretty</span> Underline</h1><p></p><h2>Wow this one  is super incredibly cool, and this <span class="underline--magical">one is on Multiple Lines!</span> I wish I had found this like thirty projects ago when I was representing the lollipop guild.</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p></p><p data-height="265" data-theme-id="0" data-slug-hash="LJwEZY" data-default-tab="css,result" data-user="dreambo8563" data-pen-title="How do I get a custom colored underline that will span multiple lines?" class="codepen">See the Pen <a href="https://codepen.io/dreambo8563/pen/LJwEZY/" target="_blank" rel="noopener">How do I get a custom colored underline that will span multiple lines?</a> by dreambo8563 (<a href="https://codepen.io/dreambo8563" target="_blank" rel="noopener">@dreambo8563</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Preview&quot;&gt;&lt;a href=&quot;#Preview&quot; class=&quot;headerlink&quot; title=&quot;Preview&quot;&gt;&lt;/a&gt;Preview&lt;/h3&gt;&lt;p&gt;&lt;style&gt;&lt;br&gt;.underline–magical {&lt;br&gt;  background-im
      
    
    </summary>
    
      <category term="CSS" scheme="https://dreambo8563.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://dreambo8563.github.io/tags/CSS/"/>
    
      <category term="Buttons" scheme="https://dreambo8563.github.io/tags/Buttons/"/>
    
      <category term="Hover" scheme="https://dreambo8563.github.io/tags/Hover/"/>
    
      <category term="Underline" scheme="https://dreambo8563.github.io/tags/Underline/"/>
    
  </entry>
  
  <entry>
    <title>CSS-Collections-Buttons-3</title>
    <link href="https://dreambo8563.github.io/2018/09/26/CSS-Collections-Buttons-3/"/>
    <id>https://dreambo8563.github.io/2018/09/26/CSS-Collections-Buttons-3/</id>
    <published>2018-09-26T01:00:25.000Z</published>
    <updated>2018-09-26T01:14:43.581Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h3><style>* {  box-sizing: border-box;}.container {  width: auto;  margin: auto;}a {  text-transform: uppercase;  text-decoration: none;  font-weight: 700;}@-webkit-keyframes top {  from {    -webkit-transform: translate(0rem, 0);            transform: translate(0rem, 0);  }  to {    -webkit-transform: translate(0rem, 3.5rem);            transform: translate(0rem, 3.5rem);  }}@keyframes top {  from {    -webkit-transform: translate(0rem, 0);            transform: translate(0rem, 0);  }  to {    -webkit-transform: translate(0rem, 3.5rem);            transform: translate(0rem, 3.5rem);  }}@-webkit-keyframes bottom {  from {    -webkit-transform: translate(-11.5rem, 0);            transform: translate(-11.5rem, 0);  }  to {    -webkit-transform: translate(0rem, 0);            transform: translate(0rem, 0);  }}@keyframes bottom {  from {    -webkit-transform: translate(-11.5rem, 0);            transform: translate(-11.5rem, 0);  }  to {    -webkit-transform: translate(0rem, 0);            transform: translate(0rem, 0);  }}.btn-hover1 {  position: relative;  letter-spacing: 0.15em;  margin: 0 auto;  padding: 1rem 2.5rem;  background: transparent;  outline: none;  font-size: 28px;  color: #111111;  transition: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) 0.15s;}.btn-hover1::after, .btn-hover1::before {  content: "";  position: absolute;  height: 40%;  width: 10%;  transition: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);  z-index: -2;  border-radius: 50%;}.btn-hover1::before {  background-color: #c92918;  top: -0.75rem;  left: 0.5rem;  -webkit-animation: top 2s cubic-bezier(0.68, -0.55, 0.265, 1.55) 0.25s infinite alternate;          animation: top 2s cubic-bezier(0.68, -0.55, 0.265, 1.55) 0.25s infinite alternate;}.btn-hover1::after {  background-color: #e74c3c;  top: 3rem;  left: 13rem;  -webkit-animation: bottom 2s cubic-bezier(0.68, -0.55, 0.265, 1.55) 0.5s infinite alternate;          animation: bottom 2s cubic-bezier(0.68, -0.55, 0.265, 1.55) 0.5s infinite alternate;}.btn-hover1:hover {  color: white;}.btn-hover1:hover::before, .btn-hover1:hover::after {  top: 0;  height: 100%;  width: 100%;  border-radius: 0;  -webkit-animation: none;          animation: none;}.btn-hover1:hover::after {  left: 0rem;}.btn-hover1:hover::before {  top: 0.5rem;  left: 0.35rem;}</style><div class="container"><a class="btn-hover1" href="#">hover me</a></div><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Lato font</span></span><br><span class="line"><span class="comment">// @import url("https://fonts.googleapis.com/css?family=Lato:400,700");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//color/ui color variables</span></span><br><span class="line"><span class="variable">$white</span>: <span class="number">#ececec</span>;</span><br><span class="line"><span class="variable">$black</span>: <span class="number">#111111</span>;</span><br><span class="line"><span class="variable">$red1</span>: <span class="number">#e74c3c</span>;</span><br><span class="line"><span class="variable">$red2</span>: <span class="number">#c92918</span>;</span><br><span class="line"><span class="variable">$colorPrimary</span>: <span class="variable">$red1</span>;</span><br><span class="line"><span class="variable">$colorSecondary</span>: <span class="variable">$red2</span>;</span><br><span class="line"><span class="variable">$cubic-bezier</span>: cubic-bezier(<span class="number">0.68</span>, -<span class="number">0.55</span>, <span class="number">0.265</span>, <span class="number">1.55</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//split button mixin</span></span><br><span class="line">@<span class="keyword">mixin</span> btn__split(<span class="variable">$foregroundColor</span>, <span class="variable">$backgroundColor</span>, <span class="variable">$textColor</span>) &#123;</span><br><span class="line">  <span class="selector-class">.btn-hover1</span> &#123;</span><br><span class="line">    <span class="comment">//display: block;</span></span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">0.15em</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1rem</span> <span class="number">2.5rem</span>;</span><br><span class="line">    <span class="attribute">background</span>: transparent;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">28px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$textColor</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.5s</span> <span class="variable">$cubic-bezier</span> <span class="number">0.15s</span>;</span><br><span class="line">    &amp;::after,</span><br><span class="line">    &amp;::before &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">40%</span>;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">10%</span>;</span><br><span class="line">      <span class="attribute">transition</span>: all <span class="number">0.5s</span> <span class="variable">$cubic-bezier</span>;</span><br><span class="line">      <span class="attribute">z-index</span>: -<span class="number">2</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="comment">//animation: grow 1s infinite;</span></span><br><span class="line">    &#125;</span><br><span class="line">    &amp;::before &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="variable">$backgroundColor</span>;</span><br><span class="line">      <span class="attribute">top</span>: -<span class="number">0.75rem</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">0.5rem</span>;</span><br><span class="line">      <span class="attribute">animation</span>: top <span class="number">2s</span> <span class="variable">$cubic-bezier</span> <span class="number">0.25s</span> infinite alternate;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;::after &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="variable">$foregroundColor</span>;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">3rem</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">13rem</span>;</span><br><span class="line">      <span class="attribute">animation</span>: bottom <span class="number">2s</span> <span class="variable">$cubic-bezier</span> <span class="number">0.5s</span> infinite alternate;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">      <span class="attribute">color</span>: white;</span><br><span class="line">      &amp;::before,</span><br><span class="line">      &amp;::after &#123;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//transform: skewx(-10deg);</span></span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">animation</span>: none;</span><br><span class="line">      &#125;</span><br><span class="line">      &amp;::after &#123;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0rem</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      &amp;::before &#123;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0.5rem</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0.35rem</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: auto;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes top &#123;</span><br><span class="line">  from &#123;</span><br><span class="line">    <span class="attribute">transform</span>: translate(<span class="number">0rem</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  to &#123;</span><br><span class="line">    <span class="attribute">transform</span>: translate(<span class="number">0rem</span>, <span class="number">3.5rem</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes bottom &#123;</span><br><span class="line">  from &#123;</span><br><span class="line">    <span class="attribute">transform</span>: translate(-<span class="number">11.5rem</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  to &#123;</span><br><span class="line">    <span class="attribute">transform</span>: translate(<span class="number">0rem</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">include</span> btn__split(<span class="variable">$colorPrimary</span>, <span class="variable">$colorSecondary</span>, <span class="variable">$black</span>);</span><br></pre></td></tr></table></figure><p></p><p data-height="265" data-theme-id="0" data-slug-hash="YOmzMP" data-default-tab="css,result" data-user="dreambo8563" data-pen-title="UI Button Hover  Effect #2" class="codepen">See the Pen <a href="https://codepen.io/dreambo8563/pen/YOmzMP/" target="_blank" rel="noopener">UI Button Hover  Effect #2</a> by dreambo8563 (<a href="https://codepen.io/dreambo8563" target="_blank" rel="noopener">@dreambo8563</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Preview&quot;&gt;&lt;a href=&quot;#Preview&quot; class=&quot;headerlink&quot; title=&quot;Preview&quot;&gt;&lt;/a&gt;Preview&lt;/h3&gt;&lt;style&gt;
* {
  box-sizing: border-box;
}

.container {
      
    
    </summary>
    
      <category term="CSS" scheme="https://dreambo8563.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://dreambo8563.github.io/tags/CSS/"/>
    
      <category term="Buttons" scheme="https://dreambo8563.github.io/tags/Buttons/"/>
    
      <category term="Hover" scheme="https://dreambo8563.github.io/tags/Hover/"/>
    
  </entry>
  
  <entry>
    <title>CSS-Collections-Buttons-2</title>
    <link href="https://dreambo8563.github.io/2018/09/25/CSS-Collections-Buttons-2/"/>
    <id>https://dreambo8563.github.io/2018/09/25/CSS-Collections-Buttons-2/</id>
    <published>2018-09-25T10:00:53.000Z</published>
    <updated>2018-09-26T00:56:52.341Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h3><script src="https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js"></script><style>.demo-container {  background-image: linear-gradient(-128deg, rgba(255, 181, 32, 0.93) 3%, rgba(239, 39, 153, 0.93) 88%, rgba(237, 18, 171, 0.93) 100%);  display: flex;  width: 100%;  height: 100%;  justify-content: center;  align-items: center;}.add-product {  transition: all 0.3s ease;  background-color: #FFC145;  height: 144px;  width: 144px;  border-radius: 72px;  box-shadow: 0 4px 16px 0 rgba(0, 0, 0, 0.07);  cursor: pointer;}.add-product.open {  background-color: #FAFAFA;  padding: 18px 32px;  border-radius: 5px;  width: 420px;  height: 398px;  cursor: default;}.add-product .button-copy {  text-align: center;  line-height: 144px;  text-transform: uppercase;  font-weight: bold;  color: #f7f7f7;}html,body {  height: 100%;  margin: 0;}body {  font-family: 'Open Sans', sans-serif;  font-size: 16px;  background-color: #F3F4F5;  cursor: default;}</style><div class="demo-container" id="app"><br>  <div class="add-product" :class="{'open': formOpen}"><br>    <div class="button-copy" v-show="!formOpen" @click="formOpen = true"><br>      Add Product<br>    </div><br>    <div v-show="formOpen" class="cancel"><br>       <span @click="formOpen=false"><br>        Cancel<br>       </span><br>    </div><br>  </div><br></div><script>var vue = new Vue({  el: '#app',  data: {    formOpen: false  }})</script><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p></p><p data-height="265" data-theme-id="0" data-slug-hash="JaQRQE" data-default-tab="css,result" data-user="dreambo8563" data-pen-title="UI: Button morphing into form" class="codepen">See the Pen <a href="https://codepen.io/dreambo8563/pen/JaQRQE/" target="_blank" rel="noopener">UI: Button morphing into form</a> by dreambo8563 (<a href="https://codepen.io/dreambo8563" target="_blank" rel="noopener">@dreambo8563</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Preview&quot;&gt;&lt;a href=&quot;#Preview&quot; class=&quot;headerlink&quot; title=&quot;Preview&quot;&gt;&lt;/a&gt;Preview&lt;/h3&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/
      
    
    </summary>
    
      <category term="CSS" scheme="https://dreambo8563.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://dreambo8563.github.io/tags/CSS/"/>
    
      <category term="Buttons" scheme="https://dreambo8563.github.io/tags/Buttons/"/>
    
      <category term="Transition" scheme="https://dreambo8563.github.io/tags/Transition/"/>
    
  </entry>
  
  <entry>
    <title>CSS-Collections-Buttons-1</title>
    <link href="https://dreambo8563.github.io/2018/09/25/CSS-Collections-Buttons-1/"/>
    <id>https://dreambo8563.github.io/2018/09/25/CSS-Collections-Buttons-1/</id>
    <published>2018-09-25T07:46:41.000Z</published>
    <updated>2018-09-26T00:59:49.777Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h3><style>* {    -webkit-box-sizing: border-box;    -moz-box-sizing: border-box;    box-sizing: border-box;}.buttons {    margin: 10%;    text-align: center;}.btn-hover {    width: 200px;    font-size: 16px;    font-weight: 600;    color: #fff;    cursor: pointer;    margin: 20px;    height: 55px;    text-align:center;    border: none;    background-size: 300% 100%;    border-radius: 50px;    moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -webkit-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;}.btn-hover:hover {    background-position: 100% 0;    moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -webkit-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;}.btn-hover:focus {    outline: none;}.btn-hover.color-1 {    background-image: linear-gradient(to right, #25aae1, #40e495, #30dd8a, #2bb673);    box-shadow: 0 4px 15px 0 rgba(49, 196, 190, 0.75);}.btn-hover.color-2 {    background-image: linear-gradient(to right, #f5ce62, #e43603, #fa7199, #e85a19);    box-shadow: 0 4px 15px 0 rgba(229, 66, 10, 0.75);}.btn-hover.color-3 {    background-image: linear-gradient(to right, #667eea, #764ba2, #6B8DD6, #8E37D7);    box-shadow: 0 4px 15px 0 rgba(116, 79, 168, 0.75);}.btn-hover.color-4 {    background-image: linear-gradient(to right, #fc6076, #ff9a44, #ef9d43, #e75516);    box-shadow: 0 4px 15px 0 rgba(252, 104, 110, 0.75);}.btn-hover.color-5 {    background-image: linear-gradient(to right, #0ba360, #3cba92, #30dd8a, #2bb673);    box-shadow: 0 4px 15px 0 rgba(23, 168, 108, 0.75);}.btn-hover.color-6 {    background-image: linear-gradient(to right, #009245, #FCEE21, #00A8C5, #D9E021);    box-shadow: 0 4px 15px 0 rgba(83, 176, 57, 0.75);}.btn-hover.color-7 {    background-image: linear-gradient(to right, #6253e1, #852D91, #A3A1FF, #F24645);    box-shadow: 0 4px 15px 0 rgba(126, 52, 161, 0.75);}.btn-hover.color-8 {    background-image: linear-gradient(to right, #29323c, #485563, #2b5876, #4e4376);    box-shadow: 0 4px 15px 0 rgba(45, 54, 65, 0.75);}.btn-hover.color-9 {    background-image: linear-gradient(to right, #25aae1, #4481eb, #04befe, #3f86ed);    box-shadow: 0 4px 15px 0 rgba(65, 132, 234, 0.75);}.btn-hover.color-10 {        background-image: linear-gradient(to right, #ed6ea0, #ec8c69, #f7186a , #FBB03B);    box-shadow: 0 4px 15px 0 rgba(236, 116, 149, 0.75);}.btn-hover.color-11 {       background-image: linear-gradient(to right, #eb3941, #f15e64, #e14e53, #e2373f);  box-shadow: 0 5px 15px rgba(242, 97, 103, .4);}</style><div class="buttons"><br>    <button class="btn-hover color-1">BUTTON</button><br>    <button class="btn-hover color-2">BUTTON</button><br>    <button class="btn-hover color-3">BUTTON</button><br>    <button class="btn-hover color-4">BUTTON</button><br>    <button class="btn-hover color-5">BUTTON</button><br>    <button class="btn-hover color-6">BUTTON</button><br>    <button class="btn-hover color-7">BUTTON</button><br>    <button class="btn-hover color-8">BUTTON</button><br>    <button class="btn-hover color-9">BUTTON</button><br>    <button class="btn-hover color-10">BUTTON</button><br>    <button class="btn-hover color-11">BUTTON</button><br></div><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p></p><p data-height="257" data-theme-id="0" data-slug-hash="oPrjRg" data-default-tab="css,result" data-user="dreambo8563" data-pen-title=" Gradient Button Hover" data-preview="true" class="codepen">See the Pen <a href="https://codepen.io/dreambo8563/pen/oPrjRg/" target="_blank" rel="noopener"> Gradient Button Hover</a> by dreambo8563 (<a href="https://codepen.io/dreambo8563" target="_blank" rel="noopener">@dreambo8563</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Preview&quot;&gt;&lt;a href=&quot;#Preview&quot; class=&quot;headerlink&quot; title=&quot;Preview&quot;&gt;&lt;/a&gt;Preview&lt;/h3&gt;&lt;style&gt;
* {
    -webkit-box-sizing: border-box;
    -
      
    
    </summary>
    
      <category term="CSS" scheme="https://dreambo8563.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://dreambo8563.github.io/tags/CSS/"/>
    
      <category term="Buttons" scheme="https://dreambo8563.github.io/tags/Buttons/"/>
    
      <category term="Gradient" scheme="https://dreambo8563.github.io/tags/Gradient/"/>
    
  </entry>
  
  <entry>
    <title>Etcd - 分布式配置中心2 - runtime切换配置</title>
    <link href="https://dreambo8563.github.io/2018/09/18/Etcd-%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%832-runtime%E5%88%87%E6%8D%A2%E9%85%8D%E7%BD%AE/"/>
    <id>https://dreambo8563.github.io/2018/09/18/Etcd-分布式配置中心2-runtime切换配置/</id>
    <published>2018-09-18T08:42:32.000Z</published>
    <updated>2018-09-18T09:07:56.886Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>背景接上一篇 <strong>Etcd - 分布式配置中心</strong><br>这里是使用 etcd 获取配置信息,后在程序中热切换配置的例子</p><h3 id="代码调用流程"><a href="#代码调用流程" class="headerlink" title="代码调用流程"></a>代码调用流程</h3><ul><li>controllers</li></ul><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controllers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/jinzhu/gorm"</span></span><br><span class="line"><span class="string">"vincent.com/iris-demo/config"</span></span><br><span class="line"><span class="string">"vincent.com/iris-demo/services"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Todo - model</span></span><br><span class="line"><span class="keyword">type</span> Todo <span class="keyword">struct</span> &#123;</span><br><span class="line">gorm.Model</span><br><span class="line">Desc <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">services.DB.AutoMigrate(&amp;Todo&#123;&#125;)</span><br><span class="line"><span class="keyword">go</span> config.StartWatch()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddTodo - insert todo item</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddTodo</span><span class="params">(desc <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// fmt.Println(services.DB)</span></span><br><span class="line">services.DB.Create(&amp;Todo&#123;Desc: desc&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>services</li></ul><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> services</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/jinzhu/gorm"</span></span><br><span class="line">_ <span class="string">"github.com/jinzhu/gorm/dialects/mysql"</span> <span class="comment">//import driver</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// DB instantce</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">DB    *gorm.DB</span><br><span class="line">preDB *gorm.DB</span><br><span class="line">err   error</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// initDb("root:my-secret-pw@(localhost:4306)/test2?charset=utf8&amp;parseTime=True&amp;loc=Local")</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//InitDb -</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitDb</span><span class="params">(dialects <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> DB != <span class="literal">nil</span> &#123;</span><br><span class="line">preDB = DB</span><br><span class="line"><span class="keyword">defer</span> preDB.Close()</span><br><span class="line">&#125;</span><br><span class="line">DB, err = gorm.Open(<span class="string">"mysql"</span>, dialects)</span><br><span class="line"><span class="comment">// defer</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">DB.Close()</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"failed to connect database"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>config</li></ul><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"go.etcd.io/etcd/clientv3"</span></span><br><span class="line"><span class="string">"vincent.com/iris-demo/services"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// constants</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">cli *clientv3.Client</span><br><span class="line">err error</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">cli, err = clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="keyword">string</span>&#123;<span class="string">"http://127.0.0.1:23790"</span>, <span class="string">"http://127.0.0.1:23791"</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// handle error!</span></span><br><span class="line">cli.Close()</span><br><span class="line">log.Fatalln(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fmt.Printf("cli init finished")</span></span><br><span class="line">getDBString()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetDBString -</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getDBString</span><span class="params">()</span></span> &#123;</span><br><span class="line">resp, err := cli.Get(context.Background(), <span class="string">"sample_key"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"get key error"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fmt.Printf("get the sample_key: %v\n", string(resp.Kvs[0].Value))</span></span><br><span class="line"><span class="comment">// log.Fatal("break now")</span></span><br><span class="line"><span class="comment">// DBch &lt;- string(resp.Kvs[0].Value)</span></span><br><span class="line">services.InitDb(<span class="keyword">string</span>(resp.Kvs[<span class="number">0</span>].Value))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//StartWatch -</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StartWatch</span><span class="params">()</span></span> &#123;</span><br><span class="line">rch := cli.Watch(context.Background(), <span class="string">"sample_key"</span>)</span><br><span class="line"><span class="keyword">for</span> wresp := <span class="keyword">range</span> rch &#123;</span><br><span class="line"><span class="keyword">for</span> _, ev := <span class="keyword">range</span> wresp.Events &#123;</span><br><span class="line">services.InitDb(<span class="keyword">string</span>(ev.Kv.Value))</span><br><span class="line"><span class="comment">// fmt.Printf("%s %q : %q\n", ev.Type, ev.Kv.Key, ev.Kv.Value)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h4><p>controllers 初试化会先初始化 import 的几个包.<br>services 的 init 是空的,config 的 init,<br>先获取 etcd 的特定节点的配置 -&gt; 调用 InitDb 初始化数据库实例 -&gt; controllers 会  启动一个 goroutine watch 节点信息的变化 -&gt; 信息变化会从新触发 InitDb 产生新的数据库实例,并且关闭旧的实例连接</p><h3 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h3><p>用 jmeter 100 个现成访问 /hello 接口, 手动切换节点信息</p><blockquote><p>ETCDCTL_API=3 ./etcdctl put sample_key ‘root:my-secret-pw@(localhost:3306)/dbname’</p></blockquote><p>整个程序过程中没有中断和报错, 但会时不时有错误信息 Mysql resource temporarily unavailable, 搜了下一般是链接数满了,或者内存不够用等造成的,应该是太大负载造成的, 确实也造成了数据的丢失.这个其实有个问题, 为什么资源不可用的情况下,gorm 没有  抛 error.  但是这个测试大概率和切换是没有关系, 说明切换的过程其实是成功的, 两个数据库里都是有大量数据的,  并且没有因为切换生成新实例的过程而报错. watch 的过程也是起作用的.<br>问题 2: 如果 etcd 集群和客户端中间失联了,  客户端应该有个 fallback 的方案,比如启动的时候走本地配置文件.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;背景接上一篇 &lt;strong&gt;Etcd - 分布式配置中心&lt;/strong&gt;&lt;br&gt;这里是使用 etcd 获取配置信息,后在程序中热切换配置
      
    
    </summary>
    
      <category term="Golang" scheme="https://dreambo8563.github.io/categories/Golang/"/>
    
      <category term="分布式" scheme="https://dreambo8563.github.io/categories/Golang/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="Golang" scheme="https://dreambo8563.github.io/tags/Golang/"/>
    
      <category term="Etcd" scheme="https://dreambo8563.github.io/tags/Etcd/"/>
    
  </entry>
  
</feed>
