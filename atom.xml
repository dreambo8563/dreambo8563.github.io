<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vincent&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dreambo8563.github.io/"/>
  <updated>2018-12-06T01:49:05.669Z</updated>
  <id>https://dreambo8563.github.io/</id>
  
  <author>
    <name>Vincent Guo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang-Trace链路跟踪实践</title>
    <link href="https://dreambo8563.github.io/2018/12/05/golang-Trace%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA%E5%AE%9E%E8%B7%B5/"/>
    <id>https://dreambo8563.github.io/2018/12/05/golang-Trace链路跟踪实践/</id>
    <published>2018-12-05T09:51:45.000Z</published>
    <updated>2018-12-06T01:49:05.669Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Tracing-系统是监控的一个方面"><a href="#Tracing-系统是监控的一个方面" class="headerlink" title="Tracing 系统是监控的一个方面"></a>Tracing 系统是监控的一个方面</h3><h4 id="基础层面跟踪"><a href="#基础层面跟踪" class="headerlink" title="基础层面跟踪"></a>基础层面跟踪</h4><p>有很多工具是可以在 k8s 这种容器化环境里自动追踪到, 服务间的调用的. 甚至记录下一些性能相关的信息, 并生成链路的图表</p><h3 id="Tracing-系统-侧重"><a href="#Tracing-系统-侧重" class="headerlink" title="Tracing 系统 侧重"></a>Tracing 系统 侧重</h3><ul><li>ELK/EFK - 侧重 log</li><li>Promethuse - 侧重 metrics</li><li>Tracing 侧重链路, 兼顾 log 和 metrics</li></ul><h4 id="Golang-生态下的例子"><a href="#Golang-生态下的例子" class="headerlink" title="Golang 生态下的例子"></a>Golang 生态下的例子</h4><h3 id="初试设定"><a href="#初试设定" class="headerlink" title="初试设定"></a>初试设定</h3><ul><li>一个 backend 组合服务</li><li>一个 jwt auth 服务</li></ul><p>— Login 接口会根据 userID 生成 jwt token<br>我们就跟踪这个路径</p><h3 id="创建-tracer"><a href="#创建-tracer" class="headerlink" title="创建 tracer"></a>创建 tracer</h3><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tracing</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"></span><br><span class="line">opentracing <span class="string">"github.com/opentracing/opentracing-go"</span></span><br><span class="line">jaeger <span class="string">"github.com/uber/jaeger-client-go"</span></span><br><span class="line">config <span class="string">"github.com/uber/jaeger-client-go/config"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="comment">// Tracer - tracer instance</span></span><br><span class="line">Tracer opentracing.Tracer</span><br><span class="line"><span class="comment">// Closer - Closer instance</span></span><br><span class="line">Closer io.Closer</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Init returns an instance of Jaeger Tracer that samples 100% of traces and logs all spans to stdout.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">(service <span class="keyword">string</span>)</span> <span class="params">(opentracing.Tracer, io.Closer)</span></span> &#123;</span><br><span class="line">cfg, err := config.FromEnv()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"ERROR: cannot init Jaeger Conf from ENV: %v\n"</span>, err))</span><br><span class="line">&#125;</span><br><span class="line">cfg.Sampler = &amp;config.SamplerConfig&#123;</span><br><span class="line">Type:  <span class="string">"const"</span>,</span><br><span class="line">Param: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line">cfg.Reporter = &amp;config.ReporterConfig&#123;</span><br><span class="line">LogSpans: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tracer, closer, err := cfg.New(service, config.Logger(jaeger.StdLogger))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"ERROR: cannot init Jaeger: %v\n"</span>, err))</span><br><span class="line">&#125;</span><br><span class="line">Tracer, Closer = tracer, closer</span><br><span class="line"><span class="comment">// in order to use StartSpanFromContext, we need SetGlobalTracer</span></span><br><span class="line">opentracing.SetGlobalTracer(Tracer)</span><br><span class="line"><span class="keyword">return</span> tracer, closer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 main 里初始化<br>确定 Service Name</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">tracing.Init(<span class="string">"todo-backend-service"</span>)</span><br><span class="line"><span class="keyword">defer</span> tracing.Closer.Close()</span><br></pre></td></tr></table></figure><h4 id="创建-span"><a href="#创建-span" class="headerlink" title="创建 span"></a>创建 span</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoginHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">tracer := tracing.Tracer</span><br><span class="line">span := tracer.StartSpan(<span class="string">"LoginHandler"</span>)</span><br><span class="line">    <span class="keyword">defer</span> span.Finish()</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取-userID-子-span"><a href="#获取-userID-子-span" class="headerlink" title="获取 userID, 子 span"></a>获取 userID, 子 span</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">ctx := opentracing.ContextWithSpan(context.Background(), span)</span><br><span class="line"><span class="comment">// 此处模拟检查用户,获取uid过程</span></span><br><span class="line">user.NewUID(ctx)</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NewUID - generate uid for a user</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span> <span class="title">NewUID</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">span, _ := opentracing.StartSpanFromContext(ctx, <span class="string">"NewUID"</span>)</span><br><span class="line"><span class="keyword">defer</span> span.Finish()</span><br><span class="line">u.ID = strconv.Itoa(rand.New(rand.NewSource(time.Now().UnixNano())).Int())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-通过-http-调用-auth-服务"><a href="#1-通过-http-调用-auth-服务" class="headerlink" title="1. 通过 http 调用 auth  服务"></a>1. 通过 http 调用 auth  服务</h4><p>tracing 的相关信息是在 header 里带给目标服务的</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">ext.SpanKindRPCClient.Set(span)</span><br><span class="line">ext.HTTPUrl.Set(span, authGetTokenURL)</span><br><span class="line">ext.HTTPMethod.Set(span, <span class="string">"POST"</span>)</span><br><span class="line">span.Tracer().Inject(</span><br><span class="line">span.Context(),</span><br><span class="line">opentracing.HTTPHeaders,</span><br><span class="line">opentracing.HTTPHeadersCarrier(header),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="2-通过-grpc-调用-auth-服务"><a href="#2-通过-grpc-调用-auth-服务" class="headerlink" title="2. 通过 grpc 调用 auth  服务"></a>2. 通过 grpc 调用 auth  服务</h4><p>初始化 grpc conn, 注意使用 otgrpc</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//InitAuthRPC -</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitAuthRPC</span><span class="params">(tracer opentracing.Tracer)</span> *<span class="title">grpc</span>.<span class="title">ClientConn</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">log.Info(<span class="string">"grpc addr"</span>, zap.String(<span class="string">"addr"</span>, authRPCServiceURL))</span><br><span class="line">conn, err = grpc.Dial(authRPCServiceURL, grpc.WithInsecure(), grpc.WithBlock(), grpc.WithTimeout(<span class="number">2</span>*time.Second), grpc.WithUnaryInterceptor(otgrpc.OpenTracingClientInterceptor(tracer)), grpc.WithStreamInterceptor(</span><br><span class="line">otgrpc.OpenTracingStreamClientInterceptor(tracer)))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"did not connect"</span>, zap.String(<span class="string">"err"</span>, err.Error()))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> conn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>… 生成 protobuf</li><li>…生成 go 文件</li><li>…调用</li><li>otgrpc 会帮助把 trace 信息  序列化反序列,已保持连贯</li></ul><h4 id="被调用-Auth-端-http"><a href="#被调用-Auth-端-http" class="headerlink" title="被调用 Auth 端 http"></a>被调用 Auth 端 http</h4><p>Extract 出 tracer</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">tracer := tracing.Tracer</span><br><span class="line">spanCtx, _ := tracer.Extract(opentracing.HTTPHeaders, opentracing.HTTPHeadersCarrier(c.Request.Header))</span><br><span class="line">span := tracer.StartSpan(<span class="string">"JWTNewTokenHandler"</span>, ext.RPCServerOption(spanCtx))</span><br><span class="line">fmt.Println(c.Request.Header)</span><br><span class="line"><span class="keyword">defer</span> span.Finish()</span><br></pre></td></tr></table></figure><h4 id="被调用-RPC"><a href="#被调用-RPC" class="headerlink" title="被调用 RPC"></a>被调用 RPC</h4><p><code>StartSpanFromContext</code></p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">span, childCtx := opentracing.StartSpanFromContext(ctx, <span class="string">"SayHello"</span>)</span><br><span class="line"><span class="keyword">defer</span> span.Finish()</span><br><span class="line">span.SetTag(<span class="string">"UID"</span>, in.Name)</span><br></pre></td></tr></table></figure><h3 id="设置-tag"><a href="#设置-tag" class="headerlink" title="设置 tag"></a>设置 tag</h3><pre><code>span.SetTag(&quot;UID&quot;, reqParams.ID)</code></pre><h3 id="携带-log"><a href="#携带-log" class="headerlink" title="携带 log"></a>携带 log</h3><pre><code>span.LogKV(&quot;event&quot;, &quot;jwt success&quot;, &quot;token&quot;, token)</code></pre><h3 id="跟踪后台-Jaeger"><a href="#跟踪后台-Jaeger" class="headerlink" title="跟踪后台 Jaeger"></a>跟踪后台 Jaeger</h3><p>使用 docker 或者二进制直接启动</p><h3 id="IMG"><a href="#IMG" class="headerlink" title="IMG"></a>IMG</h3><p> - 链路记录</p><p><img src="https://raw.githubusercontent.com/dreambo8563/static-assets/master/trace1.png" alt=""></p><ul><li>RPC 记录详情</li></ul><p><img src="https://raw.githubusercontent.com/dreambo8563/static-assets/master/trace_rpc.png" alt=""></p><ul><li>HTTP 记录详情</li></ul><p><img src="https://raw.githubusercontent.com/dreambo8563/static-assets/master/trace_http.png" alt=""></p><ul><li>比较 记录详情</li></ul><p><img src="https://raw.githubusercontent.com/dreambo8563/static-assets/master/trace_compare.png" alt=""></p><p>我们可以明显看到 rpc 方式在性能上的优势…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Tracing-系统是监控的一个方面&quot;&gt;&lt;a href=&quot;#Tracing-系统是监控的一个方面&quot; class=&quot;headerlink&quot; title=&quot;Tracing 系统是监控的一个方面&quot;&gt;&lt;/a&gt;Tracing 系统是监控的一个方面&lt;/h3&gt;&lt;h4 id=&quot;基
      
    
    </summary>
    
      <category term="Golang" scheme="https://dreambo8563.github.io/categories/Golang/"/>
    
      <category term="分布式" scheme="https://dreambo8563.github.io/categories/Golang/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="Golang" scheme="https://dreambo8563.github.io/tags/Golang/"/>
    
      <category term="分布式" scheme="https://dreambo8563.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>前端独立部署,最小docker化实践</title>
    <link href="https://dreambo8563.github.io/2018/10/30/%E5%89%8D%E7%AB%AF%E7%8B%AC%E7%AB%8B%E9%83%A8%E7%BD%B2-%E6%9C%80%E5%B0%8Fdocker%E5%8C%96%E5%AE%9E%E8%B7%B5/"/>
    <id>https://dreambo8563.github.io/2018/10/30/前端独立部署-最小docker化实践/</id>
    <published>2018-10-30T04:21:47.000Z</published>
    <updated>2018-10-30T04:36:30.900Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前端容器化-为了能够独立进行部署-配备-nginx"><a href="#前端容器化-为了能够独立进行部署-配备-nginx" class="headerlink" title="前端容器化, 为了能够独立进行部署, 配备 nginx"></a>前端容器化, 为了能够独立进行部署, 配备 nginx</h3><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><p>这里利用 docker 的 MultiStage 特性,区分打包和生产镜像的 build.<br>注意顺序,为了利用潜在的 cache 提高打包速度<br>只把生成的 dist 内容放到 nginx 里面, 并且放入自己的 nginx 配置, 毕竟默认配置不能满足 SPA 项目</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">9.11</span>.<span class="number">1</span>-alpine as build-stage</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/src/app</span></span><br><span class="line"><span class="bash">WORKDIR /usr/src/app</span></span><br><span class="line"><span class="bash">COPY package*.json /usr/src/app/</span></span><br><span class="line"><span class="bash">RUN npm install</span></span><br><span class="line"><span class="bash">COPY . .</span></span><br><span class="line"><span class="bash">RUN npm run build</span></span><br><span class="line"><span class="bash"><span class="comment"># production stage</span></span></span><br><span class="line"><span class="bash">FROM nginx:1.13.12-alpine as production-stage</span></span><br><span class="line"><span class="bash">COPY --from=build-stage /usr/src/app/dist /usr/share/nginx/html</span></span><br><span class="line"><span class="bash">COPY ./nginx/nginx.conf /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="bash">COPY ./nginx/sites-enabled /etc/nginx/sites-enabled</span></span><br><span class="line"><span class="bash">COPY ./nginx/general.conf /etc/nginx/general.conf</span></span><br><span class="line"><span class="bash">EXPOSE 80</span></span><br><span class="line"><span class="bash">CMD [<span class="string">"nginx"</span>, <span class="string">"-g"</span>, <span class="string">"daemon off;"</span>]</span></span><br></pre></td></tr></table></figure><h4 id="nginx-相关配置目录"><a href="#nginx-相关配置目录" class="headerlink" title="nginx 相关配置目录"></a>nginx 相关配置目录</h4><p>在项目根目录下放置 nginx 目录<br>是一些常规配置.<br>特意开放了 gzip_static, 以备后续前端优化使用.</p><p>-nginx<br>|——sites_enabled<br>|——–example.com.conf<br>|–general.conf<br>|–nginx.conf</p><p><strong>nginx.conf</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#user www-data;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line">worker_processes auto;</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">multi_accept on;</span><br><span class="line">worker_connections 65535;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">charset utf-8;</span><br><span class="line">sendfile on;</span><br><span class="line">tcp_nopush on;</span><br><span class="line">tcp_nodelay on;</span><br><span class="line">server_tokens off;</span><br><span class="line">log_not_found off;</span><br><span class="line">types_hash_max_size 2048;</span><br><span class="line">client_max_body_size 16M;</span><br><span class="line"></span><br><span class="line"># MIME</span><br><span class="line">include mime.types;</span><br><span class="line">default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line"># logging</span><br><span class="line">access_log /var/log/nginx/access.log;</span><br><span class="line">error_log /var/log/nginx/error.log warn;</span><br><span class="line"></span><br><span class="line"># load configs</span><br><span class="line"># include /etc/nginx/conf.d/*.conf;</span><br><span class="line">include /etc/nginx/sites-enabled/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>general.conf</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># security headers</span><br><span class="line">add_header X-Frame-Options &quot;SAMEORIGIN&quot; always;</span><br><span class="line">add_header X-XSS-Protection &quot;1; mode=block&quot; always;</span><br><span class="line">add_header X-Content-Type-Options &quot;nosniff&quot; always;</span><br><span class="line">add_header Referrer-Policy &quot;no-referrer-when-downgrade&quot; always;</span><br><span class="line">add_header Content-Security-Policy &quot;default-src * data: &apos;unsafe-eval&apos; &apos;unsafe-inline&apos;&quot; always;</span><br><span class="line"></span><br><span class="line"># . files</span><br><span class="line">location ~ /\. &#123;</span><br><span class="line">deny all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># assets, media</span><br><span class="line">location ~* \.(?:css(\.map)?|js(\.map)?|jpe?g|png|gif|ico|cur|heic|webp|tiff?|mp3|m4a|aac|ogg|midi?|wav|mp4|mov|webm|mpe?g|avi|ogv|flv|wmv)$ &#123;</span><br><span class="line">expires 30d;</span><br><span class="line">access_log off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># svg, fonts</span><br><span class="line">location ~* \.(?:svgz?|ttf|ttc|otf|eot|woff2?)$ &#123;</span><br><span class="line">add_header Access-Control-Allow-Origin &quot;*&quot;;</span><br><span class="line">expires 30d;</span><br><span class="line">access_log off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># gzip</span><br><span class="line">gzip on;</span><br><span class="line">gzip_vary on;</span><br><span class="line">gzip_staticon;</span><br><span class="line">gzip_proxied any;</span><br><span class="line">gzip_comp_level 6;</span><br><span class="line">gzip_types text/plain text/css text/xml application/json application/javascript application/xml+rss application/atom+xml image/svg+xml;</span><br></pre></td></tr></table></figure><p><strong>example.com.conf</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">root /usr/share/nginx/html;</span><br><span class="line">index index.html index.htm;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">try_files $uri $uri/ /index.html;</span><br><span class="line">  &#125;</span><br><span class="line">include /etc/nginx/general.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="以防不需要的-或者隐秘的文件被打入镜像-需要-dockerignore"><a href="#以防不需要的-或者隐秘的文件被打入镜像-需要-dockerignore" class="headerlink" title="以防不需要的,或者隐秘的文件被打入镜像. 需要 .dockerignore"></a>以防不需要的,或者隐秘的文件被打入镜像. 需要 .dockerignore</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node_modules</span><br><span class="line">npm-debug.log</span><br><span class="line">Dockerfile*</span><br><span class="line">docker-compose*</span><br><span class="line">.dockerignore</span><br><span class="line">.git</span><br><span class="line">.gitignore</span><br><span class="line">.env</span><br><span class="line">*/bin</span><br><span class="line">*/obj</span><br><span class="line">README.md</span><br><span class="line">LICENSE</span><br><span class="line">.vscode</span><br></pre></td></tr></table></figure><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>如果你的项目用了 sass, 注意你打包的网络, 因为我们都是使用的最小基础 alpine 镜像,没有 py 环境.如果不能下载 sass 包会打包失败.</p><blockquote><p>docker build -t vue-docker:v1 .</p></blockquote><h3 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h3><blockquote><p>docker run -p 8080:80 -d vue-docker:v1</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前端容器化-为了能够独立进行部署-配备-nginx&quot;&gt;&lt;a href=&quot;#前端容器化-为了能够独立进行部署-配备-nginx&quot; class=&quot;headerlink&quot; title=&quot;前端容器化, 为了能够独立进行部署, 配备 nginx&quot;&gt;&lt;/a&gt;前端容器化, 为了
      
    
    </summary>
    
      <category term="Docker" scheme="https://dreambo8563.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://dreambo8563.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>关于opener的安全小技巧</title>
    <link href="https://dreambo8563.github.io/2018/10/10/%E5%85%B3%E4%BA%8Eopener%E7%9A%84%E5%AE%89%E5%85%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://dreambo8563.github.io/2018/10/10/关于opener的安全小技巧/</id>
    <published>2018-10-10T06:05:05.000Z</published>
    <updated>2018-10-30T04:22:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="window-open"><a href="#window-open" class="headerlink" title="window.open()"></a>window.open()</h3><blockquote><p>var window = window.open(url, windowName, [windowFeatures]);</p></blockquote><p>本文主要针对 <strong>_blank</strong>的情况,</p><p> 本文主要讲的就是 windowFeature 中的 <strong>noopener</strong></p><p>当我们需要以另一个窗口的形式打开一个地址的时候, 我们常用的</p><blockquote><p>window.open(url,”_blank”)</p></blockquote><p>但由于安全方面的考虑我们需要加上个小参数, 就是 <strong>noopener</strong></p><blockquote><p>修正后: window.open(url,”_blank”,”noopener”)</p></blockquote><h3 id="window-opener"><a href="#window-opener" class="headerlink" title="window.opener"></a>window.opener</h3><p>问题就在于这个 opener 对象, 如果不加 <strong>noopener</strong></p><p>当我们用 window.open 打开一个新窗口的时候, 我们在新建的窗口里可以拿到 window.opener, 这样  我们就能获取到原窗口  的对象. <br>如果新窗口打开的  不是自己控制的页面,那人家拿到 window 对象,能做不少事情</p><blockquote><p>Lighthouse 的检查里也会检查这一项</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;window-open&quot;&gt;&lt;a href=&quot;#window-open&quot; class=&quot;headerlink&quot; title=&quot;window.open()&quot;&gt;&lt;/a&gt;window.open()&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;var window = wind
      
    
    </summary>
    
      <category term="JS" scheme="https://dreambo8563.github.io/categories/JS/"/>
    
    
      <category term="JS" scheme="https://dreambo8563.github.io/tags/JS/"/>
    
      <category term="Security" scheme="https://dreambo8563.github.io/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>CSS-Collections-Buttons-4</title>
    <link href="https://dreambo8563.github.io/2018/09/26/CSS-Collections-Buttons-4/"/>
    <id>https://dreambo8563.github.io/2018/09/26/CSS-Collections-Buttons-4/</id>
    <published>2018-09-26T01:24:06.000Z</published>
    <updated>2018-09-26T01:25:09.598Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h3><p><style><br>.underline–magical {<br>  background-image: linear-gradient(120deg, #84fab0 0%, #8fd3f4 100%);<br>  background-repeat: no-repeat;<br>  background-size: 100% 0.2em;<br>  background-position: 0 88%;<br>  transition: background-size 0.25s ease-in;<br>}<br>.underline–magical:hover {<br>  background-size: 100% 88%;<br>}<br></style></p><p></p><h1>Look At This <span class="underline--magical">Pretty</span> Underline</h1><p></p><h2>Wow this one  is super incredibly cool, and this <span class="underline--magical">one is on Multiple Lines!</span> I wish I had found this like thirty projects ago when I was representing the lollipop guild.</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p></p><p data-height="265" data-theme-id="0" data-slug-hash="LJwEZY" data-default-tab="css,result" data-user="dreambo8563" data-pen-title="How do I get a custom colored underline that will span multiple lines?" class="codepen">See the Pen <a href="https://codepen.io/dreambo8563/pen/LJwEZY/" target="_blank" rel="noopener">How do I get a custom colored underline that will span multiple lines?</a> by dreambo8563 (<a href="https://codepen.io/dreambo8563" target="_blank" rel="noopener">@dreambo8563</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Preview&quot;&gt;&lt;a href=&quot;#Preview&quot; class=&quot;headerlink&quot; title=&quot;Preview&quot;&gt;&lt;/a&gt;Preview&lt;/h3&gt;&lt;p&gt;&lt;style&gt;&lt;br&gt;.underline–magical {&lt;br&gt;  background-im
      
    
    </summary>
    
      <category term="CSS" scheme="https://dreambo8563.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://dreambo8563.github.io/tags/CSS/"/>
    
      <category term="Buttons" scheme="https://dreambo8563.github.io/tags/Buttons/"/>
    
      <category term="Hover" scheme="https://dreambo8563.github.io/tags/Hover/"/>
    
      <category term="Underline" scheme="https://dreambo8563.github.io/tags/Underline/"/>
    
  </entry>
  
  <entry>
    <title>CSS-Collections-Buttons-3</title>
    <link href="https://dreambo8563.github.io/2018/09/26/CSS-Collections-Buttons-3/"/>
    <id>https://dreambo8563.github.io/2018/09/26/CSS-Collections-Buttons-3/</id>
    <published>2018-09-26T01:00:25.000Z</published>
    <updated>2018-09-26T01:14:43.581Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h3><style>* {  box-sizing: border-box;}.container {  width: auto;  margin: auto;}a {  text-transform: uppercase;  text-decoration: none;  font-weight: 700;}@-webkit-keyframes top {  from {    -webkit-transform: translate(0rem, 0);            transform: translate(0rem, 0);  }  to {    -webkit-transform: translate(0rem, 3.5rem);            transform: translate(0rem, 3.5rem);  }}@keyframes top {  from {    -webkit-transform: translate(0rem, 0);            transform: translate(0rem, 0);  }  to {    -webkit-transform: translate(0rem, 3.5rem);            transform: translate(0rem, 3.5rem);  }}@-webkit-keyframes bottom {  from {    -webkit-transform: translate(-11.5rem, 0);            transform: translate(-11.5rem, 0);  }  to {    -webkit-transform: translate(0rem, 0);            transform: translate(0rem, 0);  }}@keyframes bottom {  from {    -webkit-transform: translate(-11.5rem, 0);            transform: translate(-11.5rem, 0);  }  to {    -webkit-transform: translate(0rem, 0);            transform: translate(0rem, 0);  }}.btn-hover1 {  position: relative;  letter-spacing: 0.15em;  margin: 0 auto;  padding: 1rem 2.5rem;  background: transparent;  outline: none;  font-size: 28px;  color: #111111;  transition: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) 0.15s;}.btn-hover1::after, .btn-hover1::before {  content: "";  position: absolute;  height: 40%;  width: 10%;  transition: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);  z-index: -2;  border-radius: 50%;}.btn-hover1::before {  background-color: #c92918;  top: -0.75rem;  left: 0.5rem;  -webkit-animation: top 2s cubic-bezier(0.68, -0.55, 0.265, 1.55) 0.25s infinite alternate;          animation: top 2s cubic-bezier(0.68, -0.55, 0.265, 1.55) 0.25s infinite alternate;}.btn-hover1::after {  background-color: #e74c3c;  top: 3rem;  left: 13rem;  -webkit-animation: bottom 2s cubic-bezier(0.68, -0.55, 0.265, 1.55) 0.5s infinite alternate;          animation: bottom 2s cubic-bezier(0.68, -0.55, 0.265, 1.55) 0.5s infinite alternate;}.btn-hover1:hover {  color: white;}.btn-hover1:hover::before, .btn-hover1:hover::after {  top: 0;  height: 100%;  width: 100%;  border-radius: 0;  -webkit-animation: none;          animation: none;}.btn-hover1:hover::after {  left: 0rem;}.btn-hover1:hover::before {  top: 0.5rem;  left: 0.35rem;}</style><div class="container"><a class="btn-hover1" href="#">hover me</a></div><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Lato font</span></span><br><span class="line"><span class="comment">// @import url("https://fonts.googleapis.com/css?family=Lato:400,700");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//color/ui color variables</span></span><br><span class="line"><span class="variable">$white</span>: <span class="number">#ececec</span>;</span><br><span class="line"><span class="variable">$black</span>: <span class="number">#111111</span>;</span><br><span class="line"><span class="variable">$red1</span>: <span class="number">#e74c3c</span>;</span><br><span class="line"><span class="variable">$red2</span>: <span class="number">#c92918</span>;</span><br><span class="line"><span class="variable">$colorPrimary</span>: <span class="variable">$red1</span>;</span><br><span class="line"><span class="variable">$colorSecondary</span>: <span class="variable">$red2</span>;</span><br><span class="line"><span class="variable">$cubic-bezier</span>: cubic-bezier(<span class="number">0.68</span>, -<span class="number">0.55</span>, <span class="number">0.265</span>, <span class="number">1.55</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//split button mixin</span></span><br><span class="line">@<span class="keyword">mixin</span> btn__split(<span class="variable">$foregroundColor</span>, <span class="variable">$backgroundColor</span>, <span class="variable">$textColor</span>) &#123;</span><br><span class="line">  <span class="selector-class">.btn-hover1</span> &#123;</span><br><span class="line">    <span class="comment">//display: block;</span></span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">0.15em</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1rem</span> <span class="number">2.5rem</span>;</span><br><span class="line">    <span class="attribute">background</span>: transparent;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">28px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$textColor</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.5s</span> <span class="variable">$cubic-bezier</span> <span class="number">0.15s</span>;</span><br><span class="line">    &amp;::after,</span><br><span class="line">    &amp;::before &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">40%</span>;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">10%</span>;</span><br><span class="line">      <span class="attribute">transition</span>: all <span class="number">0.5s</span> <span class="variable">$cubic-bezier</span>;</span><br><span class="line">      <span class="attribute">z-index</span>: -<span class="number">2</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="comment">//animation: grow 1s infinite;</span></span><br><span class="line">    &#125;</span><br><span class="line">    &amp;::before &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="variable">$backgroundColor</span>;</span><br><span class="line">      <span class="attribute">top</span>: -<span class="number">0.75rem</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">0.5rem</span>;</span><br><span class="line">      <span class="attribute">animation</span>: top <span class="number">2s</span> <span class="variable">$cubic-bezier</span> <span class="number">0.25s</span> infinite alternate;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;::after &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="variable">$foregroundColor</span>;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">3rem</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">13rem</span>;</span><br><span class="line">      <span class="attribute">animation</span>: bottom <span class="number">2s</span> <span class="variable">$cubic-bezier</span> <span class="number">0.5s</span> infinite alternate;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">      <span class="attribute">color</span>: white;</span><br><span class="line">      &amp;::before,</span><br><span class="line">      &amp;::after &#123;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//transform: skewx(-10deg);</span></span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">animation</span>: none;</span><br><span class="line">      &#125;</span><br><span class="line">      &amp;::after &#123;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0rem</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      &amp;::before &#123;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0.5rem</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0.35rem</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: auto;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes top &#123;</span><br><span class="line">  from &#123;</span><br><span class="line">    <span class="attribute">transform</span>: translate(<span class="number">0rem</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  to &#123;</span><br><span class="line">    <span class="attribute">transform</span>: translate(<span class="number">0rem</span>, <span class="number">3.5rem</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes bottom &#123;</span><br><span class="line">  from &#123;</span><br><span class="line">    <span class="attribute">transform</span>: translate(-<span class="number">11.5rem</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  to &#123;</span><br><span class="line">    <span class="attribute">transform</span>: translate(<span class="number">0rem</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">include</span> btn__split(<span class="variable">$colorPrimary</span>, <span class="variable">$colorSecondary</span>, <span class="variable">$black</span>);</span><br></pre></td></tr></table></figure><p></p><p data-height="265" data-theme-id="0" data-slug-hash="YOmzMP" data-default-tab="css,result" data-user="dreambo8563" data-pen-title="UI Button Hover  Effect #2" class="codepen">See the Pen <a href="https://codepen.io/dreambo8563/pen/YOmzMP/" target="_blank" rel="noopener">UI Button Hover  Effect #2</a> by dreambo8563 (<a href="https://codepen.io/dreambo8563" target="_blank" rel="noopener">@dreambo8563</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Preview&quot;&gt;&lt;a href=&quot;#Preview&quot; class=&quot;headerlink&quot; title=&quot;Preview&quot;&gt;&lt;/a&gt;Preview&lt;/h3&gt;&lt;style&gt;
* {
  box-sizing: border-box;
}

.container {
      
    
    </summary>
    
      <category term="CSS" scheme="https://dreambo8563.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://dreambo8563.github.io/tags/CSS/"/>
    
      <category term="Buttons" scheme="https://dreambo8563.github.io/tags/Buttons/"/>
    
      <category term="Hover" scheme="https://dreambo8563.github.io/tags/Hover/"/>
    
  </entry>
  
  <entry>
    <title>CSS-Collections-Buttons-2</title>
    <link href="https://dreambo8563.github.io/2018/09/25/CSS-Collections-Buttons-2/"/>
    <id>https://dreambo8563.github.io/2018/09/25/CSS-Collections-Buttons-2/</id>
    <published>2018-09-25T10:00:53.000Z</published>
    <updated>2018-09-26T00:56:52.341Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h3><script src="https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js"></script><style>.demo-container {  background-image: linear-gradient(-128deg, rgba(255, 181, 32, 0.93) 3%, rgba(239, 39, 153, 0.93) 88%, rgba(237, 18, 171, 0.93) 100%);  display: flex;  width: 100%;  height: 100%;  justify-content: center;  align-items: center;}.add-product {  transition: all 0.3s ease;  background-color: #FFC145;  height: 144px;  width: 144px;  border-radius: 72px;  box-shadow: 0 4px 16px 0 rgba(0, 0, 0, 0.07);  cursor: pointer;}.add-product.open {  background-color: #FAFAFA;  padding: 18px 32px;  border-radius: 5px;  width: 420px;  height: 398px;  cursor: default;}.add-product .button-copy {  text-align: center;  line-height: 144px;  text-transform: uppercase;  font-weight: bold;  color: #f7f7f7;}html,body {  height: 100%;  margin: 0;}body {  font-family: 'Open Sans', sans-serif;  font-size: 16px;  background-color: #F3F4F5;  cursor: default;}</style><div class="demo-container" id="app"><br>  <div class="add-product" :class="{'open': formOpen}"><br>    <div class="button-copy" v-show="!formOpen" @click="formOpen = true"><br>      Add Product<br>    </div><br>    <div v-show="formOpen" class="cancel"><br>       <span @click="formOpen=false"><br>        Cancel<br>       </span><br>    </div><br>  </div><br></div><script>var vue = new Vue({  el: '#app',  data: {    formOpen: false  }})</script><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p></p><p data-height="265" data-theme-id="0" data-slug-hash="JaQRQE" data-default-tab="css,result" data-user="dreambo8563" data-pen-title="UI: Button morphing into form" class="codepen">See the Pen <a href="https://codepen.io/dreambo8563/pen/JaQRQE/" target="_blank" rel="noopener">UI: Button morphing into form</a> by dreambo8563 (<a href="https://codepen.io/dreambo8563" target="_blank" rel="noopener">@dreambo8563</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Preview&quot;&gt;&lt;a href=&quot;#Preview&quot; class=&quot;headerlink&quot; title=&quot;Preview&quot;&gt;&lt;/a&gt;Preview&lt;/h3&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.17/
      
    
    </summary>
    
      <category term="CSS" scheme="https://dreambo8563.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://dreambo8563.github.io/tags/CSS/"/>
    
      <category term="Buttons" scheme="https://dreambo8563.github.io/tags/Buttons/"/>
    
      <category term="Transition" scheme="https://dreambo8563.github.io/tags/Transition/"/>
    
  </entry>
  
  <entry>
    <title>CSS-Collections-Buttons-1</title>
    <link href="https://dreambo8563.github.io/2018/09/25/CSS-Collections-Buttons-1/"/>
    <id>https://dreambo8563.github.io/2018/09/25/CSS-Collections-Buttons-1/</id>
    <published>2018-09-25T07:46:41.000Z</published>
    <updated>2018-09-26T00:59:49.777Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h3><style>* {    -webkit-box-sizing: border-box;    -moz-box-sizing: border-box;    box-sizing: border-box;}.buttons {    margin: 10%;    text-align: center;}.btn-hover {    width: 200px;    font-size: 16px;    font-weight: 600;    color: #fff;    cursor: pointer;    margin: 20px;    height: 55px;    text-align:center;    border: none;    background-size: 300% 100%;    border-radius: 50px;    moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -webkit-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;}.btn-hover:hover {    background-position: 100% 0;    moz-transition: all .4s ease-in-out;    -o-transition: all .4s ease-in-out;    -webkit-transition: all .4s ease-in-out;    transition: all .4s ease-in-out;}.btn-hover:focus {    outline: none;}.btn-hover.color-1 {    background-image: linear-gradient(to right, #25aae1, #40e495, #30dd8a, #2bb673);    box-shadow: 0 4px 15px 0 rgba(49, 196, 190, 0.75);}.btn-hover.color-2 {    background-image: linear-gradient(to right, #f5ce62, #e43603, #fa7199, #e85a19);    box-shadow: 0 4px 15px 0 rgba(229, 66, 10, 0.75);}.btn-hover.color-3 {    background-image: linear-gradient(to right, #667eea, #764ba2, #6B8DD6, #8E37D7);    box-shadow: 0 4px 15px 0 rgba(116, 79, 168, 0.75);}.btn-hover.color-4 {    background-image: linear-gradient(to right, #fc6076, #ff9a44, #ef9d43, #e75516);    box-shadow: 0 4px 15px 0 rgba(252, 104, 110, 0.75);}.btn-hover.color-5 {    background-image: linear-gradient(to right, #0ba360, #3cba92, #30dd8a, #2bb673);    box-shadow: 0 4px 15px 0 rgba(23, 168, 108, 0.75);}.btn-hover.color-6 {    background-image: linear-gradient(to right, #009245, #FCEE21, #00A8C5, #D9E021);    box-shadow: 0 4px 15px 0 rgba(83, 176, 57, 0.75);}.btn-hover.color-7 {    background-image: linear-gradient(to right, #6253e1, #852D91, #A3A1FF, #F24645);    box-shadow: 0 4px 15px 0 rgba(126, 52, 161, 0.75);}.btn-hover.color-8 {    background-image: linear-gradient(to right, #29323c, #485563, #2b5876, #4e4376);    box-shadow: 0 4px 15px 0 rgba(45, 54, 65, 0.75);}.btn-hover.color-9 {    background-image: linear-gradient(to right, #25aae1, #4481eb, #04befe, #3f86ed);    box-shadow: 0 4px 15px 0 rgba(65, 132, 234, 0.75);}.btn-hover.color-10 {        background-image: linear-gradient(to right, #ed6ea0, #ec8c69, #f7186a , #FBB03B);    box-shadow: 0 4px 15px 0 rgba(236, 116, 149, 0.75);}.btn-hover.color-11 {       background-image: linear-gradient(to right, #eb3941, #f15e64, #e14e53, #e2373f);  box-shadow: 0 5px 15px rgba(242, 97, 103, .4);}</style><div class="buttons"><br>    <button class="btn-hover color-1">BUTTON</button><br>    <button class="btn-hover color-2">BUTTON</button><br>    <button class="btn-hover color-3">BUTTON</button><br>    <button class="btn-hover color-4">BUTTON</button><br>    <button class="btn-hover color-5">BUTTON</button><br>    <button class="btn-hover color-6">BUTTON</button><br>    <button class="btn-hover color-7">BUTTON</button><br>    <button class="btn-hover color-8">BUTTON</button><br>    <button class="btn-hover color-9">BUTTON</button><br>    <button class="btn-hover color-10">BUTTON</button><br>    <button class="btn-hover color-11">BUTTON</button><br></div><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p></p><p data-height="257" data-theme-id="0" data-slug-hash="oPrjRg" data-default-tab="css,result" data-user="dreambo8563" data-pen-title=" Gradient Button Hover" data-preview="true" class="codepen">See the Pen <a href="https://codepen.io/dreambo8563/pen/oPrjRg/" target="_blank" rel="noopener"> Gradient Button Hover</a> by dreambo8563 (<a href="https://codepen.io/dreambo8563" target="_blank" rel="noopener">@dreambo8563</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Preview&quot;&gt;&lt;a href=&quot;#Preview&quot; class=&quot;headerlink&quot; title=&quot;Preview&quot;&gt;&lt;/a&gt;Preview&lt;/h3&gt;&lt;style&gt;
* {
    -webkit-box-sizing: border-box;
    -
      
    
    </summary>
    
      <category term="CSS" scheme="https://dreambo8563.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://dreambo8563.github.io/tags/CSS/"/>
    
      <category term="Buttons" scheme="https://dreambo8563.github.io/tags/Buttons/"/>
    
      <category term="Gradient" scheme="https://dreambo8563.github.io/tags/Gradient/"/>
    
  </entry>
  
  <entry>
    <title>Etcd - 分布式配置中心2 - runtime切换配置</title>
    <link href="https://dreambo8563.github.io/2018/09/18/Etcd-%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%832-runtime%E5%88%87%E6%8D%A2%E9%85%8D%E7%BD%AE/"/>
    <id>https://dreambo8563.github.io/2018/09/18/Etcd-分布式配置中心2-runtime切换配置/</id>
    <published>2018-09-18T08:42:32.000Z</published>
    <updated>2018-09-18T09:07:56.886Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>背景接上一篇 <strong>Etcd - 分布式配置中心</strong><br>这里是使用 etcd 获取配置信息,后在程序中热切换配置的例子</p><h3 id="代码调用流程"><a href="#代码调用流程" class="headerlink" title="代码调用流程"></a>代码调用流程</h3><ul><li>controllers</li></ul><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controllers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/jinzhu/gorm"</span></span><br><span class="line"><span class="string">"vincent.com/iris-demo/config"</span></span><br><span class="line"><span class="string">"vincent.com/iris-demo/services"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Todo - model</span></span><br><span class="line"><span class="keyword">type</span> Todo <span class="keyword">struct</span> &#123;</span><br><span class="line">gorm.Model</span><br><span class="line">Desc <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">services.DB.AutoMigrate(&amp;Todo&#123;&#125;)</span><br><span class="line"><span class="keyword">go</span> config.StartWatch()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddTodo - insert todo item</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddTodo</span><span class="params">(desc <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// fmt.Println(services.DB)</span></span><br><span class="line">services.DB.Create(&amp;Todo&#123;Desc: desc&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>services</li></ul><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> services</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/jinzhu/gorm"</span></span><br><span class="line">_ <span class="string">"github.com/jinzhu/gorm/dialects/mysql"</span> <span class="comment">//import driver</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// DB instantce</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">DB    *gorm.DB</span><br><span class="line">preDB *gorm.DB</span><br><span class="line">err   error</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// initDb("root:my-secret-pw@(localhost:4306)/test2?charset=utf8&amp;parseTime=True&amp;loc=Local")</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//InitDb -</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitDb</span><span class="params">(dialects <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> DB != <span class="literal">nil</span> &#123;</span><br><span class="line">preDB = DB</span><br><span class="line"><span class="keyword">defer</span> preDB.Close()</span><br><span class="line">&#125;</span><br><span class="line">DB, err = gorm.Open(<span class="string">"mysql"</span>, dialects)</span><br><span class="line"><span class="comment">// defer</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">DB.Close()</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"failed to connect database"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>config</li></ul><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"go.etcd.io/etcd/clientv3"</span></span><br><span class="line"><span class="string">"vincent.com/iris-demo/services"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// constants</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">cli *clientv3.Client</span><br><span class="line">err error</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">cli, err = clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="keyword">string</span>&#123;<span class="string">"http://127.0.0.1:23790"</span>, <span class="string">"http://127.0.0.1:23791"</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// handle error!</span></span><br><span class="line">cli.Close()</span><br><span class="line">log.Fatalln(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fmt.Printf("cli init finished")</span></span><br><span class="line">getDBString()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetDBString -</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getDBString</span><span class="params">()</span></span> &#123;</span><br><span class="line">resp, err := cli.Get(context.Background(), <span class="string">"sample_key"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"get key error"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fmt.Printf("get the sample_key: %v\n", string(resp.Kvs[0].Value))</span></span><br><span class="line"><span class="comment">// log.Fatal("break now")</span></span><br><span class="line"><span class="comment">// DBch &lt;- string(resp.Kvs[0].Value)</span></span><br><span class="line">services.InitDb(<span class="keyword">string</span>(resp.Kvs[<span class="number">0</span>].Value))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//StartWatch -</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StartWatch</span><span class="params">()</span></span> &#123;</span><br><span class="line">rch := cli.Watch(context.Background(), <span class="string">"sample_key"</span>)</span><br><span class="line"><span class="keyword">for</span> wresp := <span class="keyword">range</span> rch &#123;</span><br><span class="line"><span class="keyword">for</span> _, ev := <span class="keyword">range</span> wresp.Events &#123;</span><br><span class="line">services.InitDb(<span class="keyword">string</span>(ev.Kv.Value))</span><br><span class="line"><span class="comment">// fmt.Printf("%s %q : %q\n", ev.Type, ev.Kv.Key, ev.Kv.Value)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h4><p>controllers 初试化会先初始化 import 的几个包.<br>services 的 init 是空的,config 的 init,<br>先获取 etcd 的特定节点的配置 -&gt; 调用 InitDb 初始化数据库实例 -&gt; controllers 会  启动一个 goroutine watch 节点信息的变化 -&gt; 信息变化会从新触发 InitDb 产生新的数据库实例,并且关闭旧的实例连接</p><h3 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h3><p>用 jmeter 100 个现成访问 /hello 接口, 手动切换节点信息</p><blockquote><p>ETCDCTL_API=3 ./etcdctl put sample_key ‘root:my-secret-pw@(localhost:3306)/dbname’</p></blockquote><p>整个程序过程中没有中断和报错, 但会时不时有错误信息 Mysql resource temporarily unavailable, 搜了下一般是链接数满了,或者内存不够用等造成的,应该是太大负载造成的, 确实也造成了数据的丢失.这个其实有个问题, 为什么资源不可用的情况下,gorm 没有  抛 error.  但是这个测试大概率和切换是没有关系, 说明切换的过程其实是成功的, 两个数据库里都是有大量数据的,  并且没有因为切换生成新实例的过程而报错. watch 的过程也是起作用的.<br>问题 2: 如果 etcd 集群和客户端中间失联了,  客户端应该有个 fallback 的方案,比如启动的时候走本地配置文件.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;背景接上一篇 &lt;strong&gt;Etcd - 分布式配置中心&lt;/strong&gt;&lt;br&gt;这里是使用 etcd 获取配置信息,后在程序中热切换配置
      
    
    </summary>
    
      <category term="Golang" scheme="https://dreambo8563.github.io/categories/Golang/"/>
    
      <category term="分布式" scheme="https://dreambo8563.github.io/categories/Golang/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="Golang" scheme="https://dreambo8563.github.io/tags/Golang/"/>
    
      <category term="Etcd" scheme="https://dreambo8563.github.io/tags/Etcd/"/>
    
  </entry>
  
  <entry>
    <title>Etcd - 分布式配置中心</title>
    <link href="https://dreambo8563.github.io/2018/09/14/Etcd-%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    <id>https://dreambo8563.github.io/2018/09/14/Etcd-分布式配置中心/</id>
    <published>2018-09-14T01:48:57.000Z</published>
    <updated>2018-09-30T06:31:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Etcd-简介"><a href="#Etcd-简介" class="headerlink" title="Etcd 简介"></a>Etcd 简介</h3><p>Etcd 是一种分布式 kv 存储设施, 他具有一定的一致性,高性能,高可用的方案. 类似的 zookeeper, 但没有 zookeeper 那么重型,功能也没有覆盖那么多. 简单直接的应用就是配置中心</p><h3 id="架构设计总览"><a href="#架构设计总览" class="headerlink" title="架构设计总览"></a>架构设计总览</h3><p><img src="https://raw.githubusercontent.com/dreambo8563/static-assets/master/Untitled%20Diagram.png" alt=""></p><p>clients 为多个需要  配置的服务, 中间层为 多个 grpc-proxy 做均衡负载, 以免一个 proxy 挂了之后  导致单点问题. grpc-proxy 可以  同时访问多个 etcd 服务器,进行 kv 的操作. 如果某一个 server  挂了,会自动访问别的  集群中的其他 server 以保证高可用.</p><p>etcd cluster 至少为 3 台, 如果小于 3 台则无法进行选举,造成集群  不可用. (这里需要用 promethus 进行监控预警)</p><h3 id="etcd-cluster-本地搭建"><a href="#etcd-cluster-本地搭建" class="headerlink" title="etcd cluster 本地搭建"></a>etcd cluster 本地搭建</h3><ol><li>本地安装 etcd,或者直接下载预编译好的执行文件<br><a href="https://github.com/etcd-io/etcd/releases" target="_blank" rel="noopener">https://github.com/etcd-io/etcd/releases</a></li><li>获取 etcd 源码 (其实只是要一个配置文件 Procfile)</li><li>安装 goreman -&gt; go get github.com/mattn/goreman</li><li>修改源码根目录的 Procfile</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Use goreman to run `go get github.com/mattn/goreman`</span><br><span class="line">etcd1: /Users/vincent/Downloads/etcd-v3.3.9-darwin-amd64/etcd --name infra1 --listen-client-urls http://127.0.0.1:2379 --advertise-client-urls http://127.0.0.1:2379 --listen-peer-urls http://127.0.0.1:12380 --initial-advertise-peer-urls http://127.0.0.1:12380 --initial-cluster-token etcd-cluster-1 --initial-cluster &apos;infra1=http://127.0.0.1:12380,infra2=http://127.0.0.1:22380,infra3=http://127.0.0.1:32380,infra4=http://127.0.0.1:42380,infra5=http://127.0.0.1:52380&apos; --initial-cluster-state new --enable-pprof --log-output=stderr</span><br><span class="line">etcd2: /Users/vincent/Downloads/etcd-v3.3.9-darwin-amd64/etcd --name infra2 --listen-client-urls http://127.0.0.1:22379 --advertise-client-urls http://127.0.0.1:22379 --listen-peer-urls http://127.0.0.1:22380 --initial-advertise-peer-urls http://127.0.0.1:22380 --initial-cluster-token etcd-cluster-1 --initial-cluster &apos;infra1=http://127.0.0.1:12380,infra2=http://127.0.0.1:22380,infra3=http://127.0.0.1:32380,infra4=http://127.0.0.1:42380,infra5=http://127.0.0.1:52380&apos; --initial-cluster-state new --enable-pprof --log-output=stderr</span><br><span class="line">etcd3: /Users/vincent/Downloads/etcd-v3.3.9-darwin-amd64/etcd --name infra3 --listen-client-urls http://127.0.0.1:32379 --advertise-client-urls http://127.0.0.1:32379 --listen-peer-urls http://127.0.0.1:32380 --initial-advertise-peer-urls http://127.0.0.1:32380 --initial-cluster-token etcd-cluster-1 --initial-cluster &apos;infra1=http://127.0.0.1:12380,infra2=http://127.0.0.1:22380,infra3=http://127.0.0.1:32380,infra4=http://127.0.0.1:42380,infra5=http://127.0.0.1:52380&apos; --initial-cluster-state new --enable-pprof --log-output=stderr</span><br><span class="line">etcd4: /Users/vincent/Downloads/etcd-v3.3.9-darwin-amd64/etcd --name infra4 --listen-client-urls http://127.0.0.1:42379 --advertise-client-urls http://127.0.0.1:42379 --listen-peer-urls http://127.0.0.1:42380 --initial-advertise-peer-urls http://127.0.0.1:42380 --initial-cluster-token etcd-cluster-1 --initial-cluster &apos;infra1=http://127.0.0.1:12380,infra2=http://127.0.0.1:22380,infra3=http://127.0.0.1:32380,infra4=http://127.0.0.1:42380,infra5=http://127.0.0.1:52380&apos; --initial-cluster-state new --enable-pprof --log-output=stderr</span><br><span class="line">etcd5: /Users/vincent/Downloads/etcd-v3.3.9-darwin-amd64/etcd --name infra5 --listen-client-urls http://127.0.0.1:52379 --advertise-client-urls http://127.0.0.1:52379 --listen-peer-urls http://127.0.0.1:52380 --initial-advertise-peer-urls http://127.0.0.1:52380 --initial-cluster-token etcd-cluster-1 --initial-cluster &apos;infra1=http://127.0.0.1:12380,infra2=http://127.0.0.1:22380,infra3=http://127.0.0.1:32380,infra4=http://127.0.0.1:42380,infra5=http://127.0.0.1:52380&apos; --initial-cluster-state new --enable-pprof --log-output=stderr</span><br><span class="line">proxy1: /Users/vincent/Downloads/etcd-v3.3.9-darwin-amd64/etcd grpc-proxy start --endpoints=127.0.0.1:2379,127.0.0.1:22379,127.0.0.1:32379,127.0.0.1:42379,127.0.0.1:52379 --listen-addr=127.0.0.1:23790 --advertise-client-url=127.0.0.1:23790 --enable-pprof</span><br><span class="line">proxy2: /Users/vincent/Downloads/etcd-v3.3.9-darwin-amd64/etcd grpc-proxy start --endpoints=127.0.0.1:2379,127.0.0.1:22379,127.0.0.1:32379,127.0.0.1:42379,127.0.0.1:52379 --listen-addr=127.0.0.1:23791 --advertise-client-url=127.0.0.1:23791 --enable-pprof</span><br></pre></td></tr></table></figure><ol start="5"><li>启动集群 goreman -f Procfile start</li></ol><h4 id="配置解读"><a href="#配置解读" class="headerlink" title="配置解读"></a>配置解读</h4><p>配置了 5 个 etcd 服务模拟不同的 server, 配置了 2 个 proxy, 模拟两个 grpc-proxy 当做均衡负载<br>–listen-client-urls etcd 监听的地址<br>–listen-peer-urls 集群内部 member 互相监听的地址<br>–name 集群成员的名字<br>–advertise-client-urls 集群内成员对外发布信息的地址<br>–initial-advertise-peer-urls 对集群内发布信息的地址<br>–initial-cluster-state Set to new for all members present during initial static or DNS bootstrapping. If this option is set to existing, etcd will attempt to join the existing cluster. If the wrong value is set, etcd will attempt to start but fail safely.<br>–initial-cluster-token 集群的标示</p><p>5 个 etcd server 形成 etcd-cluster-1, 2 个 proxy 对这个集群进行代理</p><h3 id="集群检查"><a href="#集群检查" class="headerlink" title="集群检查"></a>集群检查</h3><blockquote><p>ETCDCTL_API=3 ./etcdctl endpoint –endpoints=127.0.0.1:2379,127.0.0.1:22379,127.0.0.1:32379,127.0.0.1:42379,127.0.0.1:52379 status -w table</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">λ ETCDCTL_API=3 ./etcdctl endpoint --endpoints=127.0.0.1:2379,127.0.0.1:22379,127.0.0.1:32379,127.0.0.1:42379,127.0.0.1:52379 status -w table</span><br><span class="line">+-----------------+------------------+---------+---------+-----------+-----------+------------+</span><br><span class="line">|    ENDPOINT     |        ID        | VERSION | DB SIZE | IS LEADER | RAFT TERM | RAFT INDEX |</span><br><span class="line">+-----------------+------------------+---------+---------+-----------+-----------+------------+</span><br><span class="line">|  127.0.0.1:2379 | 8211f1d0f64f3269 |   3.3.9 |   25 kB |     false |         2 |         12 |</span><br><span class="line">| 127.0.0.1:22379 | 91bc3c398fb3c146 |   3.3.9 |   25 kB |     false |         2 |         12 |</span><br><span class="line">| 127.0.0.1:32379 | fd422379fda50e48 |   3.3.9 |   25 kB |     false |         2 |         12 |</span><br><span class="line">| 127.0.0.1:42379 | 45d559f8148de837 |   3.3.9 |   25 kB |     false |         2 |         12 |</span><br><span class="line">| 127.0.0.1:52379 | c91263fe1e1dd3b5 |   3.3.9 |   25 kB |      true |         2 |         12 |</span><br><span class="line">+-----------------+------------------+---------+---------+-----------+-----------+------------+</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">λ ./etcdctl cluster-health</span><br><span class="line">member 45d559f8148de837 is healthy: got healthy result from http://127.0.0.1:42379</span><br><span class="line">member 8211f1d0f64f3269 is healthy: got healthy result from http://127.0.0.1:2379</span><br><span class="line">member 91bc3c398fb3c146 is healthy: got healthy result from http://127.0.0.1:22379</span><br><span class="line">member c91263fe1e1dd3b5 is healthy: got healthy result from http://127.0.0.1:52379</span><br><span class="line">member fd422379fda50e48 is healthy: got healthy result from http://127.0.0.1:32379</span><br><span class="line">cluster is healthy</span><br></pre></td></tr></table></figure><h3 id="编写测试客户端进行-kv-操作"><a href="#编写测试客户端进行-kv-操作" class="headerlink" title="编写测试客户端进行 kv 操作"></a>编写测试客户端进行 kv 操作</h3><blockquote><p>go get go.etcd.io/etcd</p></blockquote><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"go.etcd.io/etcd/clientv3"</span></span><br><span class="line"><span class="string">"vincent.com/etcd/etcd/etcdserver/api/v3rpc/rpctypes"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">cli, err := clientv3.New(clientv3.Config&#123;</span><br><span class="line">Endpoints:   []<span class="keyword">string</span>&#123;<span class="string">"http://127.0.0.1:23790"</span>, <span class="string">"http://127.0.0.1:23791"</span>&#125;,</span><br><span class="line">DialTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// handle error!</span></span><br><span class="line">log.Fatalln(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> cli.Close()</span><br><span class="line"><span class="keyword">defer</span> cli.Delete(context.Background(), <span class="string">"sample_key"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index := <span class="number">0</span>; index &lt; <span class="number">10000</span>; index++ &#123;</span><br><span class="line">insertKV(cli, <span class="string">"sample_key"</span>, <span class="string">"sample_value"</span>+strconv.Itoa(index))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">resp, err := cli.Get(context.Background(), <span class="string">"sample_key"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">"get key error"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"get the sample_key: %v\n"</span>, resp.Kvs)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertKV</span><span class="params">(cli *clientv3.Client, key <span class="keyword">string</span>, value <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">time.Sleep(<span class="number">2</span> * time.Millisecond)</span><br><span class="line">_, err = cli.Put(context.Background(), key, value)</span><br><span class="line"><span class="comment">// cancel()</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> err &#123;</span><br><span class="line"><span class="keyword">case</span> context.Canceled:</span><br><span class="line">log.Fatalf(<span class="string">"ctx is canceled by another routine: %v"</span>, err)</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> context.DeadlineExceeded:</span><br><span class="line">log.Fatalf(<span class="string">"ctx is attached with a deadline is exceeded: %v"</span>, err)</span><br><span class="line"><span class="keyword">case</span> rpctypes.ErrEmptyKey:</span><br><span class="line">log.Fatalf(<span class="string">"client-side error: %v"</span>, err)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">log.Fatalf(<span class="string">"bad cluster endpoints, which are not etcd servers: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端解读"><a href="#客户端解读" class="headerlink" title="客户端解读"></a>客户端解读</h4><p>etcd 客户端支持集群, 所以直接可以连接两个 proxy<br>这里进行了 1w 此的写入,每次写入会有 x ms 的延迟(我怕我的 mbp 受不了)</p><h3 id="客户端测试"><a href="#客户端测试" class="headerlink" title=" 客户端测试"></a> 客户端测试</h3><ul><li>运行客户端程序</li><li>模拟 etcd server  挂掉 <strong>goreman run stop etcd2</strong></li><li>当集群内健康机器少于 3 台的时候,客户端报错,集群整体不可用</li></ul><h3 id="集群性能检测"><a href="#集群性能检测" class="headerlink" title="集群性能检测"></a>集群性能检测</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">λ ETCDCTL_API=3 ./etcdctl check perf load=&quot;l&quot; --endpoints=127.0.0.1:2379,127.0.0.1:22379,127.0.0.1:32379,127.0.0.1:42379,127.0.0.1:52379</span><br><span class="line"> 60 / 60 Booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo! 100.00%1m0s</span><br><span class="line">PASS: Throughput is 150 writes/s</span><br><span class="line">PASS: Slowest request took 0.388842s</span><br><span class="line">PASS: Stddev is 0.029037s</span><br><span class="line">PASS</span><br></pre></td></tr></table></figure><p>注意:</p><blockquote><p>如果用命令行,记得加 ETCDCTL_API=3</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Etcd-简介&quot;&gt;&lt;a href=&quot;#Etcd-简介&quot; class=&quot;headerlink&quot; title=&quot;Etcd 简介&quot;&gt;&lt;/a&gt;Etcd 简介&lt;/h3&gt;&lt;p&gt;Etcd 是一种分布式 kv 存储设施, 他具有一定的一致性,高性能,高可用的方案. 类似的 zoo
      
    
    </summary>
    
      <category term="Golang" scheme="https://dreambo8563.github.io/categories/Golang/"/>
    
      <category term="分布式" scheme="https://dreambo8563.github.io/categories/Golang/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="Golang" scheme="https://dreambo8563.github.io/tags/Golang/"/>
    
      <category term="Etcd" scheme="https://dreambo8563.github.io/tags/Etcd/"/>
    
  </entry>
  
  <entry>
    <title>golang-uuidv1</title>
    <link href="https://dreambo8563.github.io/2018/09/12/golang-uuidv1/"/>
    <id>https://dreambo8563.github.io/2018/09/12/golang-uuidv1/</id>
    <published>2018-09-12T08:35:47.000Z</published>
    <updated>2018-09-12T08:58:27.114Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码解读-github-com-satori-go-uuid"><a href="#源码解读-github-com-satori-go-uuid" class="headerlink" title="源码解读 github.com/satori/go.uuid"></a>源码解读 github.com/satori/go.uuid</h3><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NewV1 returns UUID based on current timestamp and MAC address.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *generator)</span> <span class="title">NewV1</span><span class="params">()</span> <span class="title">UUID</span></span> &#123;</span><br><span class="line">u := UUID&#123;&#125;</span><br><span class="line"></span><br><span class="line">timeNow, clockSeq, hardwareAddr := g.getStorage()</span><br><span class="line"><span class="comment">//前32bits time-low</span></span><br><span class="line">binary.BigEndian.PutUint32(u[<span class="number">0</span>:], <span class="keyword">uint32</span>(timeNow))</span><br><span class="line"><span class="comment">// 16bits time-mid</span></span><br><span class="line">binary.BigEndian.PutUint16(u[<span class="number">4</span>:], <span class="keyword">uint16</span>(timeNow&gt;&gt;<span class="number">32</span>))</span><br><span class="line"><span class="comment">// o  Set the 12 least significant bits (bits zero through 11) of the</span></span><br><span class="line"><span class="comment">//       time_hi_and_version field equal to bits 48 through 59 from the</span></span><br><span class="line"><span class="comment">//       timestamp in the same order of significance.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    o  Set the four most significant bits (bits 12 through 15) of the</span></span><br><span class="line"><span class="comment">//       time_hi_and_version field to the 4-bit version number</span></span><br><span class="line"><span class="comment">//       corresponding to the UUID version being created, as shown in the</span></span><br><span class="line"><span class="comment">//       table above.</span></span><br><span class="line"><span class="comment">// 4bits(version) + 12bits(time_hi)</span></span><br><span class="line">binary.BigEndian.PutUint16(u[<span class="number">6</span>:], <span class="keyword">uint16</span>(timeNow&gt;&gt;<span class="number">48</span>))</span><br><span class="line"><span class="comment">// 8bits clock-seq-and-reserved + 8bits clock-seq-low</span></span><br><span class="line">binary.BigEndian.PutUint16(u[<span class="number">8</span>:], clockSeq)</span><br><span class="line"><span class="comment">//48bits node</span></span><br><span class="line"><span class="built_in">copy</span>(u[<span class="number">10</span>:], hardwareAddr)</span><br><span class="line">    <span class="comment">// 设置版本</span></span><br><span class="line">    u.SetVersion(V1)</span><br><span class="line">    <span class="comment">// 设置变体</span></span><br><span class="line">u.SetVariant(VariantRFC4122)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> u</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>BigEndian 这里使用大端序,可能会出问题</p></blockquote><h4 id="获取时钟-当期时间-和-mac-地址"><a href="#获取时钟-当期时间-和-mac-地址" class="headerlink" title="获取时钟,当期时间 和 mac 地址"></a>获取时钟,当期时间 和 mac 地址</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Returns UUID v1/v2 storage state.</span></span><br><span class="line"><span class="comment">// Returns epoch timestamp, clock sequence, and hardware address.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *generator)</span> <span class="title">getStorage</span><span class="params">()</span> <span class="params">(<span class="keyword">uint64</span>, <span class="keyword">uint16</span>, []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//sync.Once确保mac地址,和clockSequence只会初始化一次</span></span><br><span class="line">g.storageOnce.Do(g.initStorage)</span><br><span class="line"></span><br><span class="line">g.storageMutex.Lock()</span><br><span class="line"><span class="keyword">defer</span> g.storageMutex.Unlock()</span><br><span class="line"></span><br><span class="line">timeNow := epochFunc()</span><br><span class="line"><span class="comment">// Clock changed backwards since last UUID generation.</span></span><br><span class="line"><span class="comment">// Should increase clock sequence.</span></span><br><span class="line"><span class="comment">// 如果系统时间出现回退或者,在100ns内多次产生uuid.高并发的时候需要clockSequence区分周期</span></span><br><span class="line"><span class="keyword">if</span> timeNow &lt;= g.lastTime &#123;</span><br><span class="line">g.clockSequence++</span><br><span class="line">&#125;</span><br><span class="line">g.lastTime = timeNow</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> timeNow, g.clockSequence, g.hardwareAddr[:]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="初始化时钟和-mac-地址"><a href="#初始化时钟和-mac-地址" class="headerlink" title="初始化时钟和 mac 地址"></a>初始化时钟和 mac 地址</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *generator)</span> <span class="title">initStorage</span><span class="params">()</span></span> &#123;</span><br><span class="line">g.initClockSequence()</span><br><span class="line">g.initHardwareAddr()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *generator)</span> <span class="title">initClockSequence</span><span class="params">()</span></span> &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2</span>)</span><br><span class="line">g.safeRandom(buf)</span><br><span class="line"><span class="comment">// 获取随机数作为初始 clockSequence</span></span><br><span class="line">g.clockSequence = binary.BigEndian.Uint16(buf)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *generator)</span> <span class="title">initHardwareAddr</span><span class="params">()</span></span> &#123;</span><br><span class="line">interfaces, err := net.Interfaces()</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, iface := <span class="keyword">range</span> interfaces &#123;</span><br><span class="line">fmt.Printf(<span class="string">"iface.HardwareAddr %v \n"</span>, iface)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(iface.HardwareAddr) &gt;= <span class="number">6</span> &#123;</span><br><span class="line"><span class="comment">// 找到mac地址</span></span><br><span class="line"><span class="built_in">copy</span>(g.hardwareAddr[:], iface.HardwareAddr)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize hardwareAddr randomly in case</span></span><br><span class="line"><span class="comment">// of real network interfaces absence</span></span><br><span class="line"><span class="comment">// 没mac地址就先随机</span></span><br><span class="line">g.safeRandom(g.hardwareAddr[:])</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set multicast bit as recommended in RFC 4122</span></span><br><span class="line"><span class="comment">// For systems with no IEEE address, a randomly or pseudo-randomly</span></span><br><span class="line"><span class="comment">//  generated value may be used; see Section 4.5.  The multicast bit must</span></span><br><span class="line"><span class="comment">//  be set in such addresses, in order that they will never conflict with</span></span><br><span class="line"><span class="comment">//  addresses obtained from network cards.</span></span><br><span class="line"></span><br><span class="line">g.hardwareAddr[<span class="number">0</span>] |= <span class="number">0x01</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="当前时间"><a href="#当前时间" class="headerlink" title="当前时间."></a>当前时间.</h4><ul><li>初始时间- UUID epoch (October 15, 1582) and Unix epoch (January 1, 1970).</li><li>当期时间戳(100ns 为单位)</li></ul><blockquote><p>const epochStart = 122192928000000000)</p></blockquote><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Returns difference in 100-nanosecond intervals between</span></span><br><span class="line"><span class="comment">// UUID epoch (October 15, 1582) and current time.</span></span><br><span class="line"><span class="comment">// This is default epoch calculation function.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">unixTimeFunc</span><span class="params">()</span> <span class="title">uint64</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> epochStart + <span class="keyword">uint64</span>(time.Now().UnixNano()/<span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>v1 生成 uuid 的基础数据是 100ns 基本的时间戳 + mac 地址(没有的情况为随机)<br>一般加入 timestamp 1.是为了时间维度 2.是为了便于 sort<br>但是 uuid 规范的的顺序是 time-low - time-mid - 4bits(version) + 12bits(time_hi)<br>所以是不能根据 uuid 来 sort 的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码解读-github-com-satori-go-uuid&quot;&gt;&lt;a href=&quot;#源码解读-github-com-satori-go-uuid&quot; class=&quot;headerlink&quot; title=&quot;源码解读 github.com/satori/go.uuid&quot;&gt;
      
    
    </summary>
    
      <category term="Golang" scheme="https://dreambo8563.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://dreambo8563.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>golang-uuidv4</title>
    <link href="https://dreambo8563.github.io/2018/09/11/golang-uuidv4/"/>
    <id>https://dreambo8563.github.io/2018/09/11/golang-uuidv4/</id>
    <published>2018-09-11T06:31:44.000Z</published>
    <updated>2018-09-11T07:30:41.519Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码解读-github-com-satori-go-uuid"><a href="#源码解读-github-com-satori-go-uuid" class="headerlink" title="源码解读 github.com/satori/go.uuid"></a>源码解读 github.com/satori/go.uuid</h3><ul><li><p>从头开始跟踪</p><blockquote><p>u2 := uuid.NewV4()</p></blockquote></li><li><p> NewV4 函数调用</p></li></ul><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NewV4 returns random generated UUID.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *generator)</span> <span class="title">NewV4</span><span class="params">()</span> <span class="title">UUID</span></span> &#123;</span><br><span class="line">u := UUID&#123;&#125;</span><br><span class="line"><span class="comment">// 长度为16的 byte数组 -&gt; 16个8bit</span></span><br><span class="line">g.safeRandom(u[:])</span><br><span class="line">u.SetVersion(V4)</span><br><span class="line">u.SetVariant(VariantRFC4122)</span><br><span class="line"><span class="keyword">return</span> u</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>随机数填充</li></ul><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *generator)</span> <span class="title">safeRandom</span><span class="params">(dest []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 随机数充满dest</span></span><br><span class="line">    <span class="keyword">if</span> _, err := rand.Read(dest); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置版本号相关 bit</li></ul><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SetVersion sets version bits.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UUID)</span> <span class="title">SetVersion</span><span class="params">(v <span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//0x0f == 0000 1111 截取后面4bits</span></span><br><span class="line"><span class="comment">// |v &lt;&lt; 4 在特定位上置1根据version</span></span><br><span class="line"><span class="comment">//u[6] == 4bits(version) + 12bits(time_hi)</span></span><br><span class="line">u[<span class="number">6</span>] = (u[<span class="number">6</span>] &amp; <span class="number">0x0f</span>) | (v &lt;&lt; <span class="number">4</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置变体(有多个标准,相当于标准变体标识)</li></ul><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SetVariant sets variant bits.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UUID)</span> <span class="title">SetVariant</span><span class="params">(v <span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> v &#123;</span><br><span class="line"><span class="keyword">case</span> VariantNCS:</span><br><span class="line">u[<span class="number">8</span>] = (u[<span class="number">8</span>]&amp;(<span class="number">0xff</span>&gt;&gt;<span class="number">1</span>) | (<span class="number">0x00</span> &lt;&lt; <span class="number">7</span>))</span><br><span class="line">    <span class="keyword">case</span> VariantRFC4122:</span><br><span class="line">    <span class="comment">// 0xff &gt;&gt;2 == 0011 1111</span></span><br><span class="line">    <span class="comment">// 0x02 &lt;&lt;6 == 1000 0000</span></span><br><span class="line"><span class="comment">// 把u[8] 变成 10 + 6bits((bits 8 through 13) of the clock sequence)</span></span><br><span class="line">u[<span class="number">8</span>] = (u[<span class="number">8</span>]&amp;(<span class="number">0xff</span>&gt;&gt;<span class="number">2</span>) | (<span class="number">0x02</span> &lt;&lt; <span class="number">6</span>))</span><br><span class="line"><span class="keyword">case</span> VariantMicrosoft:</span><br><span class="line">u[<span class="number">8</span>] = (u[<span class="number">8</span>]&amp;(<span class="number">0xff</span>&gt;&gt;<span class="number">3</span>) | (<span class="number">0x06</span> &lt;&lt; <span class="number">5</span>))</span><br><span class="line"><span class="keyword">case</span> VariantFuture:</span><br><span class="line"><span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">u[<span class="number">8</span>] = (u[<span class="number">8</span>]&amp;(<span class="number">0xff</span>&gt;&gt;<span class="number">3</span>) | (<span class="number">0x07</span> &lt;&lt; <span class="number">5</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>uuid 表现结构, 变成 16 进制  字符并插入 -</li></ul><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u UUID)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">36</span>)</span><br><span class="line"><span class="comment">// 这个lib只输出 36长度格式的Canonical uuid</span></span><br><span class="line">hex.Encode(buf[<span class="number">0</span>:<span class="number">8</span>], u[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">buf[<span class="number">8</span>] = <span class="string">'-'</span></span><br><span class="line">hex.Encode(buf[<span class="number">9</span>:<span class="number">13</span>], u[<span class="number">4</span>:<span class="number">6</span>])</span><br><span class="line">buf[<span class="number">13</span>] = <span class="string">'-'</span></span><br><span class="line">hex.Encode(buf[<span class="number">14</span>:<span class="number">18</span>], u[<span class="number">6</span>:<span class="number">8</span>])</span><br><span class="line">buf[<span class="number">18</span>] = <span class="string">'-'</span></span><br><span class="line">hex.Encode(buf[<span class="number">19</span>:<span class="number">23</span>], u[<span class="number">8</span>:<span class="number">10</span>])</span><br><span class="line">buf[<span class="number">23</span>] = <span class="string">'-'</span></span><br><span class="line">hex.Encode(buf[<span class="number">24</span>:], u[<span class="number">10</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(buf)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hextable = <span class="string">"0123456789abcdef"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Encode</span><span class="params">(dst, src []<span class="keyword">byte</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> src &#123;</span><br><span class="line">        <span class="comment">// 把一个byte 的前4bit 和后4bit分别变成一个16进制字符</span></span><br><span class="line">dst[i*<span class="number">2</span>] = hextable[v&gt;&gt;<span class="number">4</span>]</span><br><span class="line">dst[i*<span class="number">2</span>+<span class="number">1</span>] = hextable[v&amp;<span class="number">0x0f</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(src) * <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>v4 版本是基于随机数,然后对对应的版本和变体设置. 并转化为 16 进制字符后的结果. 由于 uuid 是 128bit, 长度比较长,所以使得随机数的碰撞几率不会很高.但依然无法让唯一性完全成立.</p><h3 id="其他策略"><a href="#其他策略" class="headerlink" title="其他策略"></a>其他策略</h3><blockquote><p>Setup used by MongoDB[1]:<br>[ time, machine_id, process_id, counter ]<br>Twitter Snowflake[2] use something similar to the above.<br>Cassandra[3] use something like this:<br>[ time, version, variant, counter, node_id ]</p></blockquote><p>From PingCap:</p><blockquote><p>TiDB 的约束更强一点，需要不重复且单调递增<br>所以这边是有三个 pd-server 来负责发号，号 = 物理 timestamp + 逻辑时钟<br>前 48 位是物理时间戳，后 16 位是一个逻辑时钟（就是一个计数器）<br>每隔 1s 将物理时间通过 raft 复制到所有 pd-server 中<br>即使 master 挂了，新的 master 被选举出来，也能保证 sleep(1s) 后，一定能分配出更大且没有交集的号</p></blockquote><p>PingCap 的基本思路我觉得刨除 master/slave 的集群外. uuid 生成的主要是<br>timestamp+counter(逻辑时钟)<br>首先他们是 DB, 所以肯定希望 timestamp 来做前面部分,有利于排序索引<br>另外独立的 timestamp 对于集中的生成 uuid 可能无法满足需求,粒度可能太大容易出现重复, +counter 主要就看 counter 是怎么针对并发的请求来做处理的. 比如加锁来避免更细粒度的冲突(没有细问)</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.ietf.org/rfc/rfc4122.txt" target="_blank" rel="noopener">https://www.ietf.org/rfc/rfc4122.txt</a><br><a href="https://news.ycombinator.com/item?id=10606910" target="_blank" rel="noopener">https://news.ycombinator.com/item?id=10606910</a><br><a href="https://golang.org/pkg/crypto/rand/#Read" target="_blank" rel="noopener">https://golang.org/pkg/crypto/rand/#Read</a><br><a href="https://en.wikipedia.org/wiki//dev/random" target="_blank" rel="noopener">https://en.wikipedia.org/wiki//dev/random</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码解读-github-com-satori-go-uuid&quot;&gt;&lt;a href=&quot;#源码解读-github-com-satori-go-uuid&quot; class=&quot;headerlink&quot; title=&quot;源码解读 github.com/satori/go.uuid&quot;&gt;
      
    
    </summary>
    
      <category term="Golang" scheme="https://dreambo8563.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://dreambo8563.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Docker - SonarQube搭建</title>
    <link href="https://dreambo8563.github.io/2018/09/04/Docker-SonarQube%E6%90%AD%E5%BB%BA/"/>
    <id>https://dreambo8563.github.io/2018/09/04/Docker-SonarQube搭建/</id>
    <published>2018-09-04T12:58:32.000Z</published>
    <updated>2018-09-04T13:25:54.667Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ul><li>搭建 gitlab</li><li>搭建 jenkins</li></ul><h3 id="准备镜像"><a href="#准备镜像" class="headerlink" title="准备镜像"></a>准备镜像</h3><p>sonarqube</p><h3 id="生成-sonar-server-token"><a href="#生成-sonar-server-token" class="headerlink" title="生成 sonar server token"></a>生成 sonar server token</h3><ul><li><p>docker run -d –name sonarqube -p 9000:9000 -p 9092:9092 sonarqube</p></li><li><p>使用默认 admin/admin 登录, 获取 sever token (一定要找地方备份)<br>admin_token: 74439d5bc557dcc206fa8b1f2f5516e65680bdc8</p></li></ul><h3 id="安装-jenkins-插件"><a href="#安装-jenkins-插件" class="headerlink" title="安装 jenkins 插件"></a>安装 jenkins 插件</h3><p>SonarQube Scanner 安装</p><h3 id="jenkins-配置"><a href="#jenkins-配置" class="headerlink" title="jenkins 配置"></a>jenkins 配置</h3><p>安装 SonarQube &amp; JDK</p><ul><li><p>进入 系统管理 -&gt; Global Tool Configuration</p></li><li><p>JDK 安装</p></li><li>勾选我同意 Java SE Development Kit 的许可协议</li><li>点击 Please enter your username/password (JDK 的账号)</li><li>SonarQube Scanner 自动安装</li></ul><hr><p>SonarQube Server</p><ul><li>进入 系统管理 -&gt; 系统设置</li><li>Add SonarQube servers</li><li>Name 随便填写</li><li>Server URL: <a href="http://test.jenkins.com:9000" target="_blank" rel="noopener">http://test.jenkins.com:9000</a><br>Server version: 5.3 or higher<br>Server authentication token: 填 SonarQube 初始化时生成的 token</li><li>创建一个测试项目,得到 projectid(projectKey)</li></ul><h3 id="jenkin-项目"><a href="#jenkin-项目" class="headerlink" title="jenkin 项目"></a>jenkin 项目</h3><ul><li>建立 freestyle 项目</li><li>gitlab 相关配置</li><li><p>build 下 Analysis properties</p><blockquote><p>sonar.projectKey=wenhuapc<br>sonar.sources=.<br>sonar.host.url=<a href="http://test.jenkins.com:9000" target="_blank" rel="noopener">http://test.jenkins.com:9000</a><br>sonar.login=283f8ca640af56a0f1a175f13e708697880bc077<br>sonar.exclusions=dist/<strong>/*,static/</strong>/*</p></blockquote><ul><li>sonar.login 用的是 server token</li><li>sonar.exclusions 排除不需要扫码的目录</li></ul><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><p>build jenkins 项目  后就会在 sonar 系统里绑定的 project 中看到扫码结果</p><p> 详见质量体系相关文章</p><p>参考文章:<br><a href="https://github.com/developer-learning/night-reading-go/blob/master/articles/sonarqube-for-golang/2018-07-22-sonarqube-for-golang.md" target="_blank" rel="noopener">https://github.com/developer-learning/night-reading-go/blob/master/articles/sonarqube-for-golang/2018-07-22-sonarqube-for-golang.md</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;搭建 gitlab&lt;/li&gt;
&lt;li&gt;搭建 jenkins&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;准备镜像&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="Docker" scheme="https://dreambo8563.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://dreambo8563.github.io/tags/Docker/"/>
    
      <category term="SonarQube" scheme="https://dreambo8563.github.io/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title>VSC - TAL-FE-Helper</title>
    <link href="https://dreambo8563.github.io/2018/08/30/VSC-TAL-FE-Helper/"/>
    <id>https://dreambo8563.github.io/2018/08/30/VSC-TAL-FE-Helper/</id>
    <published>2018-08-30T15:29:26.000Z</published>
    <updated>2018-08-30T15:30:00.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="README"><a href="#README" class="headerlink" title="README"></a>README</h1><p>this plugin is used for FE team in TAL, we want have a tool to generate some template code and follow our code standard.</p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><blockquote><p>init project</p></blockquote><p><img src="https://raw.githubusercontent.com/dreambo8563/vscode-TAL-FE-Helper/master/images/init.gif" alt=""></p><blockquote><p>new a page</p></blockquote><p><img src="https://raw.githubusercontent.com/dreambo8563/vscode-TAL-FE-Helper/master/images/page.gif" alt=""></p><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><p>please configure you git well, before using this plugin. just test on mac</p><h2 id="Release-Notes"><a href="#Release-Notes" class="headerlink" title="Release Notes"></a>Release Notes</h2><h3 id="0-0-6"><a href="#0-0-6" class="headerlink" title="0.0.6"></a>0.0.6</h3><ul><li>extract text as component (context menu when text selected)<br><img src="https://raw.githubusercontent.com/dreambo8563/vscode-TAL-FE-Helper/master/images/extractComponent.gif" alt=""></li></ul><h3 id="0-0-5"><a href="#0-0-5" class="headerlink" title="0.0.5"></a>0.0.5</h3><ul><li>new Page with basic Form Template<br><img src="https://raw.githubusercontent.com/dreambo8563/vscode-TAL-FE-Helper/master/images/basic_form.gif" alt=""></li></ul><h3 id="0-0-4"><a href="#0-0-4" class="headerlink" title="0.0.4"></a>0.0.4</h3><ul><li>extract text (context menu when text selected)<br><img src="https://raw.githubusercontent.com/dreambo8563/vscode-TAL-FE-Helper/master/images/extracttext.gif" alt=""></li></ul><h3 id="0-0-2"><a href="#0-0-2" class="headerlink" title="0.0.2"></a>0.0.2</h3><ul><li>add plugin icon</li></ul><h3 id="0-0-1"><a href="#0-0-1" class="headerlink" title="0.0.1"></a>0.0.1</h3><ul><li>pull template project</li><li>create blank page</li></ul><h3 id="Git-Repo"><a href="#Git-Repo" class="headerlink" title="Git Repo"></a>Git Repo</h3><ul><li><a href="https://github.com/dreambo8563/vscode-TAL-FE-Helper.git" target="_blank" rel="noopener">Visual Studio Code’s Markdown Support</a></li></ul><p><strong>Enjoy!</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;README&quot;&gt;&lt;a href=&quot;#README&quot; class=&quot;headerlink&quot; title=&quot;README&quot;&gt;&lt;/a&gt;README&lt;/h1&gt;&lt;p&gt;this plugin is used for FE team in TAL, we want have a
      
    
    </summary>
    
      <category term="Tools" scheme="https://dreambo8563.github.io/categories/Tools/"/>
    
    
      <category term="Tools" scheme="https://dreambo8563.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>vsc - TAL-FE-ElementUI-Snippets</title>
    <link href="https://dreambo8563.github.io/2018/08/30/VSC-TAL-FE-ElementUI-Snippets/"/>
    <id>https://dreambo8563.github.io/2018/08/30/VSC-TAL-FE-ElementUI-Snippets/</id>
    <published>2018-08-30T15:28:04.000Z</published>
    <updated>2018-08-30T15:28:56.741Z</updated>
    
    <content type="html"><![CDATA[<h1 id="README"><a href="#README" class="headerlink" title="README"></a>README</h1><p>To have a better coding efficiency, we need a tool to help us repreat lots of code template, based on element-ui</p><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><p>Just for TAL group FE team, based on our template project and ElementUI</p><h2 id="Preview"><a href="#Preview" class="headerlink" title="Preview"></a>Preview</h2><p><img src="https://raw.githubusercontent.com/dreambo8563/vscode-TAL-FE-Snippets/master/images/snippets.gif" alt=""><br><img src="https://raw.githubusercontent.com/dreambo8563/vscode-TAL-FE-Snippets/master/images/form_tpl.gif" alt=""></p><h2 id="Release-Notes"><a href="#Release-Notes" class="headerlink" title="Release Notes"></a>Release Notes</h2><p>Users appreciate release notes as you update your extension.</p><h3 id="0-0-5"><a href="#0-0-5" class="headerlink" title="0.0.5"></a>0.0.5</h3><p>vue-html Form Code Template</p><ul><li>tfc -&gt; tal.form.container</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">"ruleForm"</span> <span class="attr">:rules</span>=<span class="string">"rules"</span> <span class="attr">ref</span>=<span class="string">"ruleForm"</span> <span class="attr">label-width</span>=<span class="string">"100px"</span> <span class="attr">class</span>=<span class="string">"demo-ruleForm"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"submitForm('ruleForm')"</span>&gt;</span>立即创建<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"resetForm('ruleForm')"</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>tfi -&gt; tal.form.input</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"活动名称"</span> <span class="attr">prop</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"ruleForm.name"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>tfs -&gt; tal.form.select</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"活动区域"</span> <span class="attr">prop</span>=<span class="string">"region"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">"ruleForm.region"</span> <span class="attr">placeholder</span>=<span class="string">"请选择活动区域"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">"区域一"</span> <span class="attr">value</span>=<span class="string">"shanghai"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>tfdp -&gt; tal.form.datepicker</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"活动时间"</span> <span class="attr">prop</span>=<span class="string">"date1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-date-picker</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">placeholder</span>=<span class="string">"选择日期"</span> <span class="attr">v-model</span>=<span class="string">"ruleForm.date1"</span> <span class="attr">style</span>=<span class="string">"width: 100%;"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>tftp -&gt; tal.form.timepicker</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"活动时间"</span> <span class="attr">prop</span>=<span class="string">"date2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-time-picker</span> <span class="attr">type</span>=<span class="string">"fixed-time"</span> <span class="attr">placeholder</span>=<span class="string">"选择时间"</span> <span class="attr">v-model</span>=<span class="string">"ruleForm.date2"</span> <span class="attr">style</span>=<span class="string">"width: 100%;"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-time-picker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>tfs -&gt; tal.form.switch</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"即时配送"</span> <span class="attr">prop</span>=<span class="string">"delivery"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-switch</span> <span class="attr">v-model</span>=<span class="string">"ruleForm.delivery"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-switch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>tfcg -&gt; tal.form.checkboxgroup</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"活动性质"</span> <span class="attr">prop</span>=<span class="string">"type"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-checkbox-group</span> <span class="attr">v-model</span>=<span class="string">"ruleForm.type"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">label</span>=<span class="string">"美食/餐厅线上活动"</span> <span class="attr">name</span>=<span class="string">"type"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">label</span>=<span class="string">"地推活动"</span> <span class="attr">name</span>=<span class="string">"type"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-checkbox-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>tfrg -&gt; tal.form.radiogroup</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"特殊资源"</span> <span class="attr">prop</span>=<span class="string">"resource"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-radio-group</span> <span class="attr">v-model</span>=<span class="string">"ruleForm.resource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">label</span>=<span class="string">"线上品牌商赞助"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-radio-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="0-0-4"><a href="#0-0-4" class="headerlink" title="0.0.4"></a>0.0.4</h3><ul><li>tms -&gt; tal.message.success</li><li>tmw -&gt; tal.message.warning</li><li>tme -&gt; tal.message.error</li></ul><h3 id="0-0-3"><a href="#0-0-3" class="headerlink" title="0.0.3"></a>0.0.3</h3><ul><li>quickfix for tal.form.watch-refresh</li></ul><h3 id="0-0-2"><a href="#0-0-2" class="headerlink" title="0.0.2"></a>0.0.2</h3><ul><li>add plugin icon</li><li>rename tal-submit to tfs</li><li>tiu -&gt; abbr. import { } from “@/constants/URL”</li><li>tit -&gt; abbr. import { } from “@/constants/TEXT</li><li>tia -&gt; abbr. import { } from “@/constants/API</li><li>tlp -&gt;<br>tal.list.pagination</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handleCurrentChange(val) &#123;</span><br><span class="line">      <span class="keyword">this</span>.currentPage = val</span><br><span class="line">     <span class="comment">//<span class="doctag">TODO:</span> this.refreshList(params)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>tfr -&gt; tal.form.reset</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">resetForm(formName) &#123;</span><br><span class="line">      <span class="keyword">this</span>.refs[formName].resetFields()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>tfw -&gt; tal.form.watch-refresh</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">filterForm: &#123;</span><br><span class="line">      handler: <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> data = &#123;&#125;</span><br><span class="line">        <span class="keyword">this</span>.currentPage = <span class="number">1</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span>this.refreshList(data);</span></span><br><span class="line">      &#125;,</span><br><span class="line">      deep: <span class="literal">true</span>,</span><br><span class="line">      immediate: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>tfr -&gt; tal.form.rules-data</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">rules: &#123;</span><br><span class="line">        name: [</span><br><span class="line">          &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">"请输入活动名称"</span>, <span class="attr">trigger</span>: <span class="string">"blur"</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">min</span>: <span class="number">3</span>, <span class="attr">max</span>: <span class="number">5</span>, <span class="attr">message</span>: <span class="string">"长度在 3 到 5 个字符"</span>, <span class="attr">trigger</span>: <span class="string">"blur"</span> &#125;</span><br><span class="line">        ],</span><br><span class="line">        region: [</span><br><span class="line">          &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">"请选择活动区域"</span>, <span class="attr">trigger</span>: <span class="string">"change"</span> &#125;</span><br><span class="line">        ],</span><br><span class="line">        date1: [</span><br><span class="line">          &#123;</span><br><span class="line">            type: <span class="string">"date"</span>,</span><br><span class="line">            required: <span class="literal">true</span>,</span><br><span class="line">            message: <span class="string">"请选择日期"</span>,</span><br><span class="line">            trigger: <span class="string">"change"</span></span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        type: [</span><br><span class="line">          &#123;</span><br><span class="line">            type: <span class="string">"array"</span>,</span><br><span class="line">            required: <span class="literal">true</span>,</span><br><span class="line">            message: <span class="string">"请至少选择一个活动性质"</span>,</span><br><span class="line">            trigger: <span class="string">"change"</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><ul><li>tfvm -&gt; tal.form.validate-methods</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> validatePass = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (value === <span class="string">""</span>) &#123;</span><br><span class="line">    callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"请再次输入密码"</span>))</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value !== <span class="keyword">this</span>.ruleForm2.pass) &#123;</span><br><span class="line">    callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"两次输入密码不一致!"</span>))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    callback()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0-0-1"><a href="#0-0-1" class="headerlink" title="0.0.1"></a>0.0.1</h3><ul><li>tal-submit (form submit method)</li></ul><hr><h3 id="For-more-information"><a href="#For-more-information" class="headerlink" title="For more information"></a>For more information</h3><ul><li><a href="http://code.visualstudio.com/docs/languages/markdown" target="_blank" rel="noopener">Visual Studio Code’s Markdown Support</a></li><li><a href="https://help.github.com/articles/markdown-basics/" target="_blank" rel="noopener">Markdown Syntax Reference</a></li></ul><p><strong>Enjoy!</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;README&quot;&gt;&lt;a href=&quot;#README&quot; class=&quot;headerlink&quot; title=&quot;README&quot;&gt;&lt;/a&gt;README&lt;/h1&gt;&lt;p&gt;To have a better coding efficiency, we need a tool to 
      
    
    </summary>
    
      <category term="Tools" scheme="https://dreambo8563.github.io/categories/Tools/"/>
    
    
      <category term="Tools" scheme="https://dreambo8563.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>前端质量思考</title>
    <link href="https://dreambo8563.github.io/2018/08/28/%E5%89%8D%E7%AB%AF%E8%B4%A8%E9%87%8F%E6%80%9D%E8%80%83/"/>
    <id>https://dreambo8563.github.io/2018/08/28/前端质量思考/</id>
    <published>2018-08-28T05:12:58.000Z</published>
    <updated>2018-09-30T06:33:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>上周参加了来自百度同行的代码扫描平台的分享.<br>总结如下:<br>百度的代码扫描平台主要方式是对源代码的静态扫码, 做的比较突出的是 java 和 C++.<br>对于我们这种绝大部分技术栈是 php 的现状还不太适用.<br>通过对分享者的提问,了解到他们对其他语言 php, golang, js,py 等扫码基本上都是对开源或者商业方案的组合. 例如 sonar</p><p>本周在社区内碰巧看到几篇代码扫码的文章. 所以促进我思考了下如果咱们想用,能怎么用.<br>调研结果:</p><h3 id="靠近工程的维度"><a href="#靠近工程的维度" class="headerlink" title="靠近工程的维度:"></a>靠近工程的维度:</h3><ul><li>遵循前端规范模板</li><li>提交前需要 lint ( npm run lint)</li><li>根据插件统计,降低重复度 (&lt;3%)</li><li>圈复杂度 - IDE 插件(codeMetric) - 单个函数需要不能为红色. (复杂度超过 10)</li><li>重复率以 IDE 插件(JSCPD)为准, sonar 统计的不是很准</li><li>Sonar 扫描指标参考<ol><li>Bug - 需要为 A - must-fix</li><li>Vulnerability - 需要为 A must-fix</li><li>Code Smells - 可选-酌情清理 might-fix</li><li>可维护性 - A - must-fix</li><li>注释覆盖率(不能作为绝对依据, 命名的好很多时候不需要注释)</li></ol></li></ul><h3 id="靠近业务的维度"><a href="#靠近业务的维度" class="headerlink" title="靠近业务的维度:"></a>靠近业务的维度:</h3><ul><li>单元测试覆盖率</li><li>QA 自动化部分</li></ul><p>目前只做到 jenkins 里的 freestyle 的任务可以和 sonar 整合, pipeline 类型的还没找到好办法.</p><p>相关截图:<br><img src="https://raw.githubusercontent.com/dreambo8563/static-assets/master/lALPBY0V47KDmq7NAUrNBCA_1056_330.png" alt=""><br><img src="https://raw.githubusercontent.com/dreambo8563/static-assets/master/lALPBY0V47KCyeDNAhXNBZs_1435_533.png" alt=""><br><img src="https://raw.githubusercontent.com/dreambo8563/static-assets/master/lALPBY0V47KEtG_NA9nNA_g_1016_985.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上周参加了来自百度同行的代码扫描平台的分享.&lt;br&gt;总结如下:&lt;br&gt;百度的代码扫描平台主要方式是对源代码的静态扫码, 做的比较突出的是 java 和 C++.&lt;br&gt;对于我们这种绝大部分技术栈是 php 的现状还不太适用.&lt;br&gt;通过对分享者的提问,了解到他们对其他语言 
      
    
    </summary>
    
      <category term="Thinking" scheme="https://dreambo8563.github.io/categories/Thinking/"/>
    
    
      <category term="Thinking" scheme="https://dreambo8563.github.io/tags/Thinking/"/>
    
  </entry>
  
  <entry>
    <title>Sentry - node-express</title>
    <link href="https://dreambo8563.github.io/2018/08/17/Sentry-node-express/"/>
    <id>https://dreambo8563.github.io/2018/08/17/Sentry-node-express/</id>
    <published>2018-08-17T07:08:19.000Z</published>
    <updated>2018-08-17T07:09:45.226Z</updated>
    
    <content type="html"><![CDATA[<p>直接上代码吧:</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> express <span class="keyword">from</span> <span class="string">"express"</span></span><br><span class="line"><span class="keyword">import</span> &#123; NextFunction, Request, Response &#125; <span class="keyword">from</span> <span class="string">"express"</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> path <span class="keyword">from</span> <span class="string">"path"</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> favicon <span class="keyword">from</span> <span class="string">"serve-favicon"</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> logger <span class="keyword">from</span> <span class="string">"morgan"</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> cookieParser <span class="keyword">from</span> <span class="string">"cookie-parser"</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> bodyParser <span class="keyword">from</span> <span class="string">"body-parser"</span></span><br><span class="line"><span class="keyword">import</span> &#123; rootDir &#125; <span class="keyword">from</span> <span class="string">"../config/"</span></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">"../routes"</span></span><br><span class="line"><span class="keyword">import</span> &#123; Config &#125; <span class="keyword">from</span> <span class="string">"../config"</span></span><br><span class="line"><span class="keyword">const</span> Raven = <span class="built_in">require</span>(<span class="string">"raven"</span>)</span><br><span class="line">Raven.config(<span class="string">"http://b902881811664cc8bcbb34f2585f09be@localhost:9000/3"</span>, &#123;</span><br><span class="line">  autoBreadcrumbs: <span class="literal">true</span>,</span><br><span class="line">  captureUnhandledRejections: <span class="literal">true</span></span><br><span class="line">&#125;).install()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// view engine setup</span></span><br><span class="line">app.set(<span class="string">"views"</span>, path.join(rootDir(), <span class="string">"views"</span>))</span><br><span class="line">app.set(<span class="string">"view engine"</span>, <span class="string">"jade"</span>)</span><br><span class="line"><span class="comment">// The request handler must be the first middleware on the app</span></span><br><span class="line">app.use(Raven.requestHandler())</span><br><span class="line"></span><br><span class="line"><span class="comment">// uncomment after placing your favicon in /public</span></span><br><span class="line">app.use(favicon(path.join(rootDir(), <span class="string">"public"</span>, <span class="string">"favicon.png"</span>)))</span><br><span class="line">app.use(logger(<span class="string">"dev"</span>))</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: <span class="literal">false</span> &#125;))</span><br><span class="line">app.use(cookieParser(Config().session.secret))</span><br><span class="line"></span><br><span class="line">app.use(express.static(path.join(rootDir(), <span class="string">"public"</span>)))</span><br><span class="line"><span class="comment">// Raven.context(function() &#123;&#125;)</span></span><br><span class="line"><span class="comment">// all your stuff goes here</span></span><br><span class="line">app.use(<span class="string">"/api/project"</span>, routes.project)</span><br><span class="line">app.use(<span class="string">"/api"</span>, routes.api)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The error handler must be before any other error middleware</span></span><br><span class="line">app.use(Raven.errorHandler())</span><br><span class="line"><span class="comment">// catch 404 and forward to error handler</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Not Found"</span>)</span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  err.status = <span class="number">404</span></span><br><span class="line">  next(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// error handler</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err: <span class="built_in">Error</span>, req: Request, res: Response, next: NextFunction</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// set locals, only providing error in development</span></span><br><span class="line">  res.locals.message = err.message</span><br><span class="line">  res.locals.error = req.app.get(<span class="string">"env"</span>) === <span class="string">"development"</span> ? err : &#123;&#125;</span><br><span class="line">  res.locals.sentryID = (res <span class="keyword">as</span> <span class="built_in">any</span>).sentry</span><br><span class="line">  <span class="comment">// render the error page</span></span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  res.status(err.status || <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">  res.render(<span class="string">"error"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> app</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;直接上代码吧:&lt;/p&gt;
&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; * &lt;span 
      
    
    </summary>
    
      <category term="Docker" scheme="https://dreambo8563.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://dreambo8563.github.io/tags/Docker/"/>
    
      <category term="Sentry" scheme="https://dreambo8563.github.io/tags/Sentry/"/>
    
      <category term="Node" scheme="https://dreambo8563.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Docker-Sentry</title>
    <link href="https://dreambo8563.github.io/2018/08/15/Docker-Sentry/"/>
    <id>https://dreambo8563.github.io/2018/08/15/Docker-Sentry/</id>
    <published>2018-08-15T09:44:53.000Z</published>
    <updated>2018-08-16T01:26:49.104Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker-搭建-Sentry-监控-vue-前端报错"><a href="#Docker-搭建-Sentry-监控-vue-前端报错" class="headerlink" title="Docker  搭建 Sentry 监控 vue 前端报错"></a>Docker  搭建 Sentry 监控 vue 前端报错</h3><h4 id="基本镜像"><a href="#基本镜像" class="headerlink" title="基本镜像"></a>基本镜像</h4><ul><li>redis</li><li>postgres</li><li>sentry</li></ul><h4 id="生成-sentry-的-secret-key"><a href="#生成-sentry-的-secret-key" class="headerlink" title="生成 sentry 的 secret key"></a>生成 sentry 的 secret key</h4><blockquote><p>docker run –rm sentry config generate-secret-key</p></blockquote><p>这个 key 要保存好</p><h4 id="启动-redis"><a href="#启动-redis" class="headerlink" title="启动 redis"></a>启动 redis</h4><blockquote><p>docker run -d –name sentry-redis redis</p></blockquote><h4 id="启动-postgres"><a href="#启动-postgres" class="headerlink" title="启动 postgres"></a>启动 postgres</h4><blockquote><p>docker run -d –name sentry-postgres -e POSTGRES_PASSWORD=secret -e POSTGRES_USER=sentry postgres</p></blockquote><h4 id="创建-sentry-用户"><a href="#创建-sentry-用户" class="headerlink" title="创建 sentry 用户"></a>创建 sentry 用户</h4><blockquote><p>docker run -it –rm -e SENTRY_SECRET_KEY=’<secret-key>‘ –link sentry-postgres:postgres –link sentry-redis:redis sentry upgrade</secret-key></p></blockquote><h4 id="启动-sentry-实例"><a href="#启动-sentry-实例" class="headerlink" title="启动 sentry 实例"></a>启动 sentry 实例</h4><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span> -d --name my-sentry \</span><br><span class="line">    -p 9000:9000 \</span><br><span class="line">    -e SENTRY_SERVER_EMAIL=xxx@qq.com \</span><br><span class="line">    -e SENTRY_EMAIL_HOST=smtp.qq.com \</span><br><span class="line">    -e SENTRY_EMAIL_PORT=587 \</span><br><span class="line">    -e SENTRY_EMAIL_USER=xxx@qq.com \</span><br><span class="line">    -e SENTRY_EMAIL_PASSWORD=xxx \</span><br><span class="line">    -e SENTRY_EMAIL_USE_TLS=true \</span><br><span class="line">    -e SENTRY_SECRET_KEY='xxxxx' \</span><br><span class="line">    --link sentry-redis:redis \</span><br><span class="line">    --link sentry-postgres:postgres sentry</span><br></pre></td></tr></table></figure><h4 id="启动-cron"><a href="#启动-cron" class="headerlink" title="启动 cron"></a>启动 cron</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d --name sentry-cron \</span><br><span class="line">    -e SENTRY_SERVER_EMAIL=xxx@qq.com \</span><br><span class="line">    -e SENTRY_EMAIL_HOST=smtp.qq.com \</span><br><span class="line">    -e SENTRY_EMAIL_PORT=587 \</span><br><span class="line">    -e SENTRY_EMAIL_USER=xxx@qq.com \</span><br><span class="line">    -e SENTRY_EMAIL_PASSWORD=xxx \</span><br><span class="line">    -e SENTRY_EMAIL_USE_TLS=true \</span><br><span class="line">    -e SENTRY_SECRET_KEY=&apos;xxx&apos; \</span><br><span class="line">    --link sentry-postgres:postgres \</span><br><span class="line">    --link sentry-redis:redis sentry run cron</span><br></pre></td></tr></table></figure><h4 id="启动-worker"><a href="#启动-worker" class="headerlink" title="启动 worker"></a>启动 worker</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d --name sentry-worker-1 \</span><br><span class="line">    -e SENTRY_SERVER_EMAIL=xxx@qq.com \</span><br><span class="line">    -e SENTRY_EMAIL_HOST=smtp.qq.com \</span><br><span class="line">    -e SENTRY_EMAIL_PORT=587 \</span><br><span class="line">    -e SENTRY_EMAIL_USER=xxx@qq.com \</span><br><span class="line">    -e SENTRY_EMAIL_PASSWORD=xxx \</span><br><span class="line">    -e SENTRY_EMAIL_USE_TLS=true \</span><br><span class="line">    -e SENTRY_SECRET_KEY=&apos;xxxm&apos; \</span><br><span class="line">    --link sentry-postgres:postgres --link sentry-redis:redis sentry run worker</span><br></pre></td></tr></table></figure><h4 id="进入系统"><a href="#进入系统" class="headerlink" title="进入系统"></a>进入系统</h4><p>localhost:9000 进入 sentry, 创建 js 项目 获取到 sdk 要注册的地址</p><h3 id="Vue-配置"><a href="#Vue-配置" class="headerlink" title="Vue 配置"></a>Vue 配置</h3><h4 id="安装-raven-js"><a href="#安装-raven-js" class="headerlink" title="安装 raven-js"></a>安装 raven-js</h4><blockquote><p>npm install raven-js –save</p></blockquote><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p>根据 raven-js/vue 的插件改了下,添加了 warnHandler, 因为 vue 内部的一些 warning 特别是一些  因为数据结构不对导致的渲染不出来报错,我们肯定也需要捕获</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatComponentName</span>(<span class="params">vm: any</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (vm.$root === vm) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"root instance"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> name = vm._isVue</span><br><span class="line">    ? vm.$options.name || vm.$options._componentTag</span><br><span class="line">    : vm.name;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    (name ? <span class="string">"component &lt;"</span> + name + <span class="string">"&gt;"</span> : <span class="string">"anonymous component"</span>) +</span><br><span class="line">    (vm._isVue &amp;&amp; vm.$options.__file ? <span class="string">" at "</span> + vm.$options.__file : <span class="string">""</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//@ts-ignore</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">vuePlugin</span>(<span class="params">Raven, Vue: any</span>) </span>&#123;</span><br><span class="line">  Vue = Vue || (<span class="built_in">window</span> <span class="keyword">as</span> any).Vue;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// quit if Vue isn't on the page</span></span><br><span class="line">  <span class="keyword">if</span> (!Vue || !Vue.config) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> _oldOnError = Vue.config.errorHandler;</span><br><span class="line">  Vue.config.errorHandler = <span class="function"><span class="keyword">function</span> <span class="title">VueErrorHandler</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    error: any,</span></span></span><br><span class="line"><span class="function"><span class="params">    vm: any,</span></span></span><br><span class="line"><span class="function"><span class="params">    info: any</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> metaData: any = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// vm and lifecycleHook are not always available</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(vm) === <span class="string">"[object Object]"</span>) &#123;</span><br><span class="line">      metaData.componentName = formatComponentName(vm);</span><br><span class="line">      metaData.propsData = vm.$options.propsData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> info !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line">      metaData.lifecycleHook = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Raven.captureException(error, &#123;</span><br><span class="line">      extra: metaData</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.error(error, info);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> _oldOnError === <span class="string">"function"</span>) &#123;</span><br><span class="line">      _oldOnError.call(<span class="keyword">this</span>, error, vm, info);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  Vue.config.warnHandler = Vue.config.errorHandler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> vuePlugin;</span><br></pre></td></tr></table></figure><h4 id="注入-Vue"><a href="#注入-Vue" class="headerlink" title="注入 Vue"></a>注入 Vue</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Raven <span class="keyword">from</span> <span class="string">"raven-js"</span></span><br><span class="line"><span class="keyword">import</span> RavenVue <span class="keyword">from</span> <span class="string">"@/utils/sentry"</span></span><br><span class="line"><span class="comment">//@ts-ignore</span></span><br><span class="line"><span class="keyword">const</span> RavenPlugin: Raven.RavenPlugin = RavenVue</span><br><span class="line">Raven.config(<span class="string">"http://xxx@localhost:9000/2"</span>, &#123;</span><br><span class="line">  environment: process.env.NODE_ENV,</span><br><span class="line">  captureUnhandledRejections: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">  .addPlugin(RavenPlugin, Vue)</span><br><span class="line">  .install()</span><br><span class="line"></span><br><span class="line">Vue.use(Element)</span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Raven.context(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    router,</span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">  &#125;).$mount(<span class="string">"#app"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在相应拦截出也可以,进行捕获:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">http.interceptors.response.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> config.data || &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  (error: any) =&gt; &#123;</span><br><span class="line">    <span class="comment">// loadingInstance.close();</span></span><br><span class="line">    <span class="comment">// 登录失败|禁用|token失效等相关问题返回401，此处做跳转登录页动作</span></span><br><span class="line">    <span class="keyword">if</span> (error.response.status === <span class="number">401</span>) &#123;</span><br><span class="line">      Notification(&#123;</span><br><span class="line">        type: <span class="string">"error"</span>,</span><br><span class="line">        title: HTTP_STATUS_TITLE_ERROR,</span><br><span class="line">        message: error.response.data.message || HTTP_STATUS_MSG_401,</span><br><span class="line">        duration: <span class="number">3000</span></span><br><span class="line">      &#125;)</span><br><span class="line">      router.push(&#123; <span class="attr">path</span>: PATH_LOGIN &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error.response.status &gt;= <span class="number">400</span> &amp;&amp; error.response.status &lt; <span class="number">500</span>) &#123;</span><br><span class="line">      Notification(&#123;</span><br><span class="line">        type: <span class="string">"error"</span>,</span><br><span class="line">        title: HTTP_STATUS_TITLE_ERROR,</span><br><span class="line">        message: error.response.data.message || HTTP_STATUS_TITLE_ERROR,</span><br><span class="line">        duration: <span class="number">3000</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Notification(&#123;</span><br><span class="line">        <span class="comment">// 基于axiosCreate中validateStatus配置的区间判断此时状态码&gt;=500 或者 浏览器直接报错(比如跨域) 走此弹框。</span></span><br><span class="line">        type: <span class="string">"error"</span>,</span><br><span class="line">        title: HTTP_STATUS_TITLE_5XX,</span><br><span class="line">        message: HTTP_STATUS_MSG_5XX,</span><br><span class="line">        duration: <span class="number">3000</span></span><br><span class="line">      &#125;)</span><br><span class="line">      Raven.captureException(error)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error.response)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="配置邮箱通知"><a href="#配置邮箱通知" class="headerlink" title="配置邮箱通知"></a>配置邮箱通知</h3><p>上面 启动 sentry 相关容器的时候有几个环境变量</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-e SENTRY_SERVER_EMAIL=xxx@qq.com \</span><br><span class="line">-e SENTRY_EMAIL_HOST=smtp.qq.com \</span><br><span class="line">-e SENTRY_EMAIL_PORT=587 \</span><br><span class="line">-e SENTRY_EMAIL_USER=xxx@qq.com \</span><br><span class="line">-e SENTRY_EMAIL_PASSWORD=xxx \</span><br></pre></td></tr></table></figure><p>SENTRY_SERVER_EMAIL 要和 SENTRY_EMAIL_USER 地址一样<br>我这里用的 qq 邮箱</p><p>注意:<br>SENTRY_EMAIL_PASSWORD 是开启设置里面的 smtp 控制的时候,通过短信获得的授权码,不是你的登录密码</p><p>到此配置完成,当遇到报错的时候,会直接推送给 sentry. sentry 会通过邮件通知</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Docker-搭建-Sentry-监控-vue-前端报错&quot;&gt;&lt;a href=&quot;#Docker-搭建-Sentry-监控-vue-前端报错&quot; class=&quot;headerlink&quot; title=&quot;Docker  搭建 Sentry 监控 vue 前端报错&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Docker" scheme="https://dreambo8563.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://dreambo8563.github.io/tags/Docker/"/>
    
      <category term="Sentry" scheme="https://dreambo8563.github.io/tags/Sentry/"/>
    
      <category term="Vue" scheme="https://dreambo8563.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>golang - compare struct/slice/map</title>
    <link href="https://dreambo8563.github.io/2018/08/08/golang-compare-struct-slice-map/"/>
    <id>https://dreambo8563.github.io/2018/08/08/golang-compare-struct-slice-map/</id>
    <published>2018-08-08T02:04:00.000Z</published>
    <updated>2018-08-08T02:06:24.966Z</updated>
    
    <content type="html"><![CDATA[<p>遇到一道 leecode 的 对比 tree 的题, 一层层对比下去当然可以, 但是我想怎么才能对 struct 进行比较呢? 确实貌似没想到什么 api.</p><p>搜到结果如下</p><p>reflect 包</p><blockquote><p>func DeepEqual(x, y interface{}) bool<br>DeepEqual reports whether x and y are “deeply equal,” defined as follows. Two values of identical type are deeply equal if one of the following cases applies. Values of distinct types are never deeply equal.</p></blockquote><p>Array values are deeply equal when their corresponding elements are deeply equal.</p><p>Struct values are deeply equal if their corresponding fields, both exported and unexported, are deeply equal.</p><p>Func values are deeply equal if both are nil; otherwise they are not deeply equal.</p><p>Interface values are deeply equal if they hold deeply equal concrete values.</p><p>Map values are deeply equal when all of the following are true: they are both nil or both non-nil, they have the same length, and either they are the same map object or their corresponding keys (matched using Go equality) map to deeply equal values.</p><p>Pointer values are deeply equal if they are equal using Go’s == operator or if they point to deeply equal values.</p><p>Slice values are deeply equal when all of the following are true: they are both nil or both non-nil, they have the same length, and either they point to the same initial entry of the same underlying array (that is, &amp;x[0] == &amp;y[0]) or their corresponding elements (up to length) are deeply equal. Note that a non-nil empty slice and a nil slice (for example, []byte{} and []byte(nil)) are not deeply equal.</p><p>Other values - numbers, bools, strings, and channels - are deeply equal if they are equal using Go’s == operator.</p><p>In general DeepEqual is a recursive relaxation of Go’s == operator. However, this idea is impossible to implement without some inconsistency. Specifically, it is possible for a value to be unequal to itself, either because it is of func type (uncomparable in general) or because it is a floating-point NaN value (not equal to itself in floating-point comparison), or because it is an array, struct, or interface containing such a value. On the other hand, pointer values are always equal to themselves, even if they point at or contain such problematic values, because they compare equal using Go’s == operator, and that is a sufficient condition to be deeply equal, regardless of content. DeepEqual has been defined so that the same short-cut applies to slices and maps: if x and y are the same slice or the same map, they are deeply equal regardless of content.</p><p>As DeepEqual traverses the data values it may find a cycle. The second and subsequent times that DeepEqual compares two pointer values that have been compared before, it treats the values as equal rather than examining the values to which they point. This ensures that DeepEqual terminates.</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSameTree</span><span class="params">(p *TreeNode, q *TreeNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> reflect.DeepEqual(p, q)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;遇到一道 leecode 的 对比 tree 的题, 一层层对比下去当然可以, 但是我想怎么才能对 struct 进行比较呢? 确实貌似没想到什么 api.&lt;/p&gt;
&lt;p&gt;搜到结果如下&lt;/p&gt;
&lt;p&gt;reflect 包&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;func De
      
    
    </summary>
    
      <category term="Golang" scheme="https://dreambo8563.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://dreambo8563.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Newton&#39;s method</title>
    <link href="https://dreambo8563.github.io/2018/08/07/Newton-s-method/"/>
    <id>https://dreambo8563.github.io/2018/08/07/Newton-s-method/</id>
    <published>2018-08-07T01:37:16.000Z</published>
    <updated>2018-08-07T01:38:26.291Z</updated>
    
    <content type="html"><![CDATA[<p>简易入门了解:</p><p><a href="https://jingyan.baidu.com/article/f79b7cb31082079144023ebb.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/f79b7cb31082079144023ebb.html</a></p><p>wiki:</p><p><a href="https://baike.baidu.com/item/%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95/10887580?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95/10887580?fr=aladdin</a></p><p><a href="https://en.wikipedia.org/wiki/Newton%27s_method" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Newton%27s_method</a></p><p>简单的说, 是一个不断替换中间变量 -&gt; 判断是落入收敛区间 -&gt; 继续判断不断趋近结果 的过程</p><p>牛顿迭代法 求开方:</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"sqrt(int x): %d"</span>, mySqrt(<span class="number">8</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mySqrt</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    xF := <span class="keyword">float64</span>(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bingo(xF/<span class="number">2</span>, xF)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bingo</span><span class="params">(m <span class="keyword">float64</span>, init <span class="keyword">float64</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    result := (m + init/m) / <span class="keyword">float64</span>(<span class="number">2.0</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"m: %f , result: %f \n"</span>, m, result)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">int</span>(m) == <span class="keyword">int</span>(result) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">int</span>(m)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bingo(result, init)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注: 在搜索过程中 发现了更神奇的 卡马克传奇:</p><p><a href="https://en.wikipedia.org/wiki/Fast_inverse_square_root" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Fast_inverse_square_root</a></p><p>故事源于 雷神之锤 3 中的一段神奇的代码. 有兴趣可以去了解下</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简易入门了解:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jingyan.baidu.com/article/f79b7cb31082079144023ebb.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://jingyan.b
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://dreambo8563.github.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://dreambo8563.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>圈复杂度衡量</title>
    <link href="https://dreambo8563.github.io/2018/07/25/%E5%9C%88%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%A1%A1%E9%87%8F/"/>
    <id>https://dreambo8563.github.io/2018/07/25/圈复杂度衡量/</id>
    <published>2018-07-25T12:44:15.000Z</published>
    <updated>2018-09-30T06:33:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity#Definition" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Cyclomatic_complexity#Definition</a></p><p>简单的理解就是这段代码流程的复杂度, 假设需要单元测试覆盖,需要的 case 数量.<br>主要体现在</p><ul><li>if … else … 分支</li><li>loop</li><li>&amp;&amp; / || 分支</li><li>switch 分支</li><li>嵌套层数</li><li>内嵌函数 等</li></ul><h2 id="检测工具"><a href="#检测工具" class="headerlink" title="检测工具"></a>检测工具</h2><p>vs code 插件 :<br><img src="https://raw.githubusercontent.com/dreambo8563/static-assets/master/code_metrics.png" alt=""></p><p> 检测方法级别的圈复杂度,并给出增加复杂度的相关代码</p><h2 id="使用截图"><a href="#使用截图" class="headerlink" title="使用截图"></a>使用截图</h2><p><img src="https://raw.githubusercontent.com/dreambo8563/static-assets/master/code_metrics_using.png" alt=""></p><h2 id="SonarQube"><a href="#SonarQube" class="headerlink" title="SonarQube"></a>SonarQube</h2><p>Sonar 只能检测到文件级别,而且不能标示具体增加的具体行.<br>所以推荐使用  vsc 的插件</p><h2 id="基本优化方案"><a href="#基本优化方案" class="headerlink" title="基本优化方案"></a>基本优化方案</h2><ul><li> 抽象重用方法</li><li>组件拆分</li><li>算法优化</li><li>其他请 google</li><li>拆分方法,尽力做到一个方法只负责一件事</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclomatic_complexity#Definitio
      
    
    </summary>
    
      <category term="Tools" scheme="https://dreambo8563.github.io/categories/Tools/"/>
    
    
      <category term="Tools" scheme="https://dreambo8563.github.io/tags/Tools/"/>
    
  </entry>
  
</feed>
